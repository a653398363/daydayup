import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as e}from"./app-R7pVbBlq.js";const t={},p=e(`<blockquote><p>正向表达式就是所匹配要操作的字符串在前，表达式 pattern 在后; 反向表达式则是表达式 pattern 在前，所匹配要操作的字符串在后。</p></blockquote><ol><li><strong>exc(?:pattern)</strong><br> 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“factor(?:y|ies)”就是一个比“factory|factories”更简略的表达式</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token string">&#39;factorywork&#39;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">factor(?:y|ies)</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str:&#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token comment">// str: work</span>

<span class="token comment">// 和(?=pattern)的区别前者是组合各个部分</span>
<span class="token comment">// str: ywork</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>exc(?=pattern) ** (查找符合 pattern 规则的 exc 部分)** 正向肯定预查，在任何匹配 pattern 的 exc 开始处匹配查找字符串。这是一个非获取匹配，该匹配不需要获取供以后使用。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token string">&#39;factory123work123factory866&#39;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">factory(?=\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str:&#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token comment">// str: 123work123866</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>exc(?!pattern)<br><strong>正向否定预查，在任何不匹配 pattern 的 exc 开始处匹配查找字符串</strong>。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token string">&#39;factorywork123factory866&#39;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">factory(?!\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str:&#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token comment">// str: work123factory866</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>(?&lt;=pattern)exc 反向肯定预查，与正向肯定预查类似，只是方向相反。查找符合表达式 pattern 的 exc。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token string">&#39;factorywork123factory866&#39;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\d)factory</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 去掉数字后面factory部分</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str:&#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token comment">// str: factorywork123866</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>(?&lt;!pattern)exc 反向否定预查，与正向否定预查类似，只是方向相反。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token string">&#39;thisfactorywork123factory866&#39;</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\\d)factory</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 去掉非数字后的factory</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str:&#39;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token comment">// str: thiswork123factory866</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见正则应用" tabindex="-1"><a class="header-anchor" href="#常见正则应用"><span>常见正则应用</span></a></h2><ol><li>常见手机号处理 手机号格式化</li></ol><ul><li>手机号 3-4-4 分割</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> mobile <span class="token operator">=</span> <span class="token string">&#39;13312345678&#39;</span>
<span class="token keyword">let</span> mobileReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\\d{4})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mobile<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>mobileReg<span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 133-1234-5678</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>手机号码中间四位数字用*表示</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phone <span class="token operator">=</span> <span class="token string">&#39;13312345678&#39;</span>
<span class="token keyword">const</span> phoneReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d{3})(\\d{4})(\\d{4})$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">const</span> sp <span class="token operator">=</span> phone<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>phoneReg<span class="token punctuation">,</span> <span class="token string">&#39;$1****$3&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// sp: 133****6789</span>

<span class="token comment">// 也可以使用该正则表达3-4-4格式</span>
<span class="token keyword">const</span> w <span class="token operator">=</span> phone<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>phoneReg<span class="token punctuation">,</span> <span class="token string">&#39;$1-$2-$3&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>$1--$9 是 RegExp 自带的。代表的是 <strong>分组</strong>，即小括号里面的小正则 捕获到的内容 是用来表示正则表达式子表达式相匹配的文本。 这里的$1 就是代表的就是第一个括号内的内容</p></blockquote><ol start="2"><li>提取连续重复的字符</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">collectRepeatStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> repeatStrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> repeatRe <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.+)\\1+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
  <span class="token comment">// \\1 和 \\2 表示第一个和第二个被捕获括号匹配的子字符串，\\1+ 表示重复1次以上</span>
  <span class="token comment">// \\1{2,} 表示重复两次以上</span>
  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>repeatRe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">old<span class="token punctuation">,</span> txt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    txt <span class="token operator">&amp;&amp;</span> repeatStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> repeatStrs
<span class="token punctuation">}</span>

<span class="token comment">// console.log(collectRepeatStr(&#39;12323555454545666&#39;)) [&#39;23&#39;, &#39;5&#39;, &#39;45&#39;, &#39;6&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>replace 用法：stringObj.replace(regexp/substr,replacement) replace 方法不仅可以替换字符，也可以用来提取字符</p></blockquote><ul><li>将数字转化为大写</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;一&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;二&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;六&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> upCase <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ary<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;upCase&#39;</span><span class="token punctuation">,</span> upCase<span class="token punctuation">)</span>
<span class="token comment">// upCase 一二三四五六</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将_后的第一个字母转化为大写</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;_you _are _my _sweet_heart &#39;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\_\\w?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str2&#39;</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token comment">// You Are My SweetHeart</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>实现一个 trim 函数</li></ol><ul><li>直接去除空格，是我们比较常用的,直接将空字符替换. \\s 匹配任何空白字符，包括空格、制表符、换页符等等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*|\\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>提取非空空格法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*(.*?)\\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>数字价格千分位分割</li></ol><ul><li>将 123456789 变成 123,456,789</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">&#39;123456789&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 123,456,789</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>将字符串首字母转化为大写，剩下为小写</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> capitalizeRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\\s+)\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

  <span class="token keyword">return</span> string
    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>capitalizeRegex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> match<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>将字符串驼峰化</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">camelCase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> camelCaseRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>camelCaseRegex<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> char <span class="token operator">?</span> char<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>通过 name 获取 url query 参数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getQueryByName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryNameRegex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[?&amp;]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=([^&amp;]*)(&amp;|$)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> queryNameMatch <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>queryNameRegex<span class="token punctuation">)</span>
  <span class="token comment">// 一般都会通过decodeURIComponent解码处理</span>
  <span class="token keyword">return</span> queryNameMatch <span class="token operator">?</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>queryNameMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>是否为中文</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4e00-\\u9fa5]</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,41),o=[p];function c(l,i){return n(),a("div",null,o)}const k=s(t,[["render",c],["__file","regular.html.vue"]]),d=JSON.parse('{"path":"/tools/regular.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"icon":"tool","title":"正则表达式","category":["正则表达式"],"tag":["regular"],"description":"正向表达式就是所匹配要操作的字符串在前，表达式 pattern 在后; 反向表达式则是表达式 pattern 在前，所匹配要操作的字符串在后。 exc(?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“factor(?:y|ie...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/tools/regular.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正向表达式就是所匹配要操作的字符串在前，表达式 pattern 在后; 反向表达式则是表达式 pattern 在前，所匹配要操作的字符串在后。 exc(?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“factor(?:y|ie..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"regular"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"常见正则应用","slug":"常见正则应用","link":"#常见正则应用","children":[]}],"git":{"createdTime":1666083052000,"updatedTime":1680096943000,"contributors":[{"name":"a653398363","email":"653398363@qq.com","commits":3},{"name":"FanGe","email":"653398363@qq.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1037},"filePathRelative":"tools/regular.md","localizedDate":"2022年10月18日","excerpt":"","autoDesc":true}');export{k as comp,d as data};
