import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-R7pVbBlq.js";const p={},t=e(`<h1 id="typescript-类型" tabindex="-1"><a class="header-anchor" href="#typescript-类型"><span>typescript 类型</span></a></h1><h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><h3 id="string-类型" tabindex="-1"><a class="header-anchor" href="#string-类型"><span>String 类型</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;Hello Bug!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="boolean-类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型"><span>Boolean 类型</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="number-类型" tabindex="-1"><a class="header-anchor" href="#number-类型"><span>Number 类型</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="enum-类型" tabindex="-1"><a class="header-anchor" href="#enum-类型"><span>Enum 类型</span></a></h3><p>枚举类型用于定义数值集合，使用枚举我们可以定义一些带名字的常量。使用枚举可以清晰地表达意图或创建一组有区别的用例。，如周一到周日，方位上下左右等</p><ul><li>普通枚举<br> 初始值默认为 0 其余的成员会会按顺序自动增长 可以理解为数组下标</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  <span class="token constant">RED</span><span class="token punctuation">,</span>
  <span class="token constant">PINK</span><span class="token punctuation">,</span>
  <span class="token constant">BLUE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">red</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置初始值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">PINK</span><span class="token punctuation">,</span>
  <span class="token constant">BLUE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token literal-property property">pink</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pink<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符串枚举</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">,</span>
  <span class="token constant">PINK</span> <span class="token operator">=</span> <span class="token string">&quot;粉色&quot;</span><span class="token punctuation">,</span>
  <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">pink</span><span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pink<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 粉色</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>常量枚举<br> 使用 const 关键字修饰的枚举，常量枚举与普通枚举的区别是，整个枚举会在编译阶段被删除 我们可以看下编译之后的效果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>
  <span class="token constant">RED</span><span class="token punctuation">,</span>
  <span class="token constant">PINK</span><span class="token punctuation">,</span>
  <span class="token constant">BLUE</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">color</span><span class="token operator">:</span> Color<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span><span class="token constant">PINK</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[0, 1, 2]</span>

<span class="token comment">//编译之后的js如下：</span>
<span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment">/* RED */</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* PINK */</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* BLUE */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 可以看到我们的枚举并没有被编译成js代码 只是把color这个数组变量编译出来了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-类型" tabindex="-1"><a class="header-anchor" href="#array-类型"><span>Array 类型</span></a></h3><p>对数组类型的定义有两种方式:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token literal-property property">arr2</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组-tuple-类型" tabindex="-1"><a class="header-anchor" href="#元组-tuple-类型"><span>元组（tuple）类型</span></a></h3><p>上面数组类型的方式，只能定义出内部全为同种类型的数组。对于内部不同类型的数组可以使用元组类型来定义</p><p>元组（ Tuple ）表示一个已知数量和类型的数组,可以理解为他是一种特殊的数组</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">tuple</span><span class="token operator">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> string<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangmazi&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，元组类型只能表示一个已知元素数量和类型的数组，长度已指定，越界访问会提示错误。例如，一个数组中可能有多种类型，数量和类型都不确定，那就直接 any[]。</p><h3 id="undefined-和-null" tabindex="-1"><a class="header-anchor" href="#undefined-和-null"><span>undefined 和 null</span></a></h3><p>默认情况下 null 和 undefined 是所有类型的子类型。也就是说你可以把 null 和 undefined 赋值给其他类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token keyword">let</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&#39;zhangmazi&#39;</span>
str <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 编译正确</span>
str <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 编译正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在 tsconfig.json 指定了&quot;strictNullChecks&quot;:true ，即开启严格模式后， null 和 undefined 只能赋值给 void 和它们各自的类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 启用 --strictNullChecks</span>
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> number
x <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 编译正确</span>
x <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 编译错误</span>
x <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 编译错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="any-类型" tabindex="-1"><a class="header-anchor" href="#any-类型"><span>any 类型</span></a></h3><p>any 会跳过类型检查器对值的检查，任何值都可以赋值给 any 类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token number">1</span>
value <span class="token operator">=</span> <span class="token string">&#39;zhangmazi&#39;</span> <span class="token comment">// 编译正确</span>
value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 编译正确</span>
value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 编译正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void-类型" tabindex="-1"><a class="header-anchor" href="#void-类型"><span>void 类型</span></a></h3><p>void 意思就是无效的, 一般只用在函数上，告诉别人这个函数没有返回值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello 啊，树哥！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="never-类型" tabindex="-1"><a class="header-anchor" href="#never-类型"><span>never 类型</span></a></h3><p>never 类型表示的是那些永不存在的值的类型。例如 never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型</p><p>值会永不存在的两种情况：</p><ol><li>如果一个函数执行时抛出了异常，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）</li><li>函数中执行无限循环的代码（死循环），使得程序永远无法运行到函数返回值那一步，永不存在返回。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回never的函数必须存在无法达到的终点</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">message</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">{</span>
  <span class="token comment">// 编译正确</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 推断的返回值类型为never</span>
<span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Something failed&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 返回never的函数必须存在无法达到的终点</span>
<span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unknown-类型" tabindex="-1"><a class="header-anchor" href="#unknown-类型"><span>Unknown 类型</span></a></h3><p>unknown 与 any 一样，所有类型都可以分配给 unknown:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">value</span><span class="token operator">:</span> unknown <span class="token operator">=</span> <span class="token number">1</span>
value <span class="token operator">=</span> <span class="token string">&#39;zhangmazi&#39;</span> <span class="token comment">// 编译正确</span>
value <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 编译正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tips</strong> unknown 与 any 的最大区别是：</p><p>任何类型的值可以赋值给 any，同时 any 类型的值也可以赋值给任何类型。unknown 任何类型的值都可以赋值给它，但它只能赋值给 unknown 和 any</p><p>any 是任意类型，具有所有类型的行为，可被执行，可访问属性，超脱于类型系统之外。</p><p>unknown 则是类型更安全的 any，同样可以将任何类型赋给它，但不能执行任何操作，必须用类型断言来显示说明类型才能去执行操作。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>declare <span class="token keyword">const</span> <span class="token literal-property property">user</span><span class="token operator">:</span> known<span class="token punctuation">;</span>

<span class="token comment">// 报错，unknown 不能被使用</span>
user<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开发者认为 user 是个字符串</span>
<span class="token comment">// 使用 as 进行类型推断才能使用</span>
<span class="token punctuation">(</span>user <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type ParsedType <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function">parseApiResponse</span><span class="token punctuation">(</span>
  <span class="token literal-property property">response</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> unknown<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">ParsedType</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> convertedResponse <span class="token operator">=</span> <span class="token punctuation">(</span>response <span class="token keyword">as</span> ParsedType<span class="token punctuation">)</span>

  <span class="token comment">// without doing the type cast we would</span>
  <span class="token comment">// get a type error here</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>convertedResponse<span class="token punctuation">.</span>id <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> convertedResponse
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> Error<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid response&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>never 是无法观测的类型，比如不会执行完的函数的返回值，合并结果不存在的交叉类型。在类型编程中非常活跃，常用于丢弃一些子类型。</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p>软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p><p>在像 C#和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>any 类型会导致这个函数可以接收任何类型的 arg 参数，这样就丢失了一些信息：传入的类型与返回的类型应该是相同的。如果我们传入一个数字，我们只知道任何类型的值都有可能被返回<br><strong>不同于使用 any，泛型不会丢失信息，传入数值类型并返回数值类型</strong></p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> output <span class="token operator">=</span> identity <span class="token operator">&lt;</span> string <span class="token operator">&gt;</span> <span class="token string">&#39;myString&#39;</span> <span class="token comment">// type of output will be &#39;string&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们明确的指定了 T 是 string 类型，并做为一个参数传给函数，使用了&lt;&gt;括起来而不是()。</p><p>第二种方法更普遍。利用了<a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E8%AE%BA">类型推论</a> -- 即编译器会根据传入的参数自动地帮助我们确定 T 的类型：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">&#39;myString&#39;</span><span class="token punctuation">)</span> <span class="token comment">// type of output will be &#39;string&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意我们没必要使用尖括号（&lt;&gt;）来明确地传入类型；编译器可以查看 myString 的值，然后把 T 设置为它的类型。 类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入 T 的类型，在一些复杂的情况下，这是可能出现的。</p><h2 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型"><span>对象类型</span></a></h2><p>这里所说的对象类型，就是我们常说的函数、{}、数组、类</p><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span>object</span></a></h3><p>object 表示非原始类型，也就是除 number，string，boolean，symbol，null 或 undefined 之外的类型。</p><p>使用 object 类型，就可以更好的表示像 Object.create 这样的 API。例如：在严格模式下，null 和 undefined 类型也不能赋给 object。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>declare <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">o</span><span class="token operator">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>

<span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>
<span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>

<span class="token function">create</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// Error</span>
<span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Error</span>
<span class="token function">create</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// Error</span>
<span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-1" tabindex="-1"><a class="header-anchor" href="#object-1"><span>Object</span></a></h3><p>大 Object 代表所有拥有 toString、hasOwnProperty 方法的类型 所以所有原始类型、非原始类型都可以赋给 Object(严格模式下 null 和 undefined 不可以)</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">bigObject</span><span class="token operator">:</span> Object
object <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 编译正确</span>
object <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token comment">// 编译正确</span>
object <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 编译正确</span>
object <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 报错</span>
ObjectCase <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 报错</span>
ObjectCase <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>{}</span></a></h3><p>{} 空对象类型和大 Object 一样 也是表示原始类型和非原始类型的集合</p><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h3><p>在 TypeScript 中，我们通过 Class 关键字来定义一个类</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string
  <span class="token literal-property property">age</span><span class="token operator">:</span> number
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><ul><li>函数声明</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数表达式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接口定义函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>x<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可选参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">return</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>剩余参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载"><span>函数重载</span></a></h3><p>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，我们给同一个函数提供多个函数类型定义，从而实现函数的重载</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意函数重载真正执行的是同名函数最后定义的函数体 在最后一个函数体定义之前全都属于函数类型定义 不能写具体的函数实现方法 只能定义类型</p></div><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h2><h3 id="类型推论" tabindex="-1"><a class="header-anchor" href="#类型推论"><span>类型推论</span></a></h3><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论的规则推断出一个类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
x <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 报错</span>
<span class="token comment">// equal to</span>
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span>
x <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 x 的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时,大多数情况下，类型推论是直截了当地</p><p>而如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x
x <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 编译正确</span>
x <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 编译正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h3><p>某些情况下，我们可能比 typescript 更加清楚的知道某个变量的类型，所以我们可能希望手动指定一个值的类型类型断言有两种方式</p><ul><li>尖括号写法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token string">&quot;you are right&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">strLength</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>as 写法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token string">&quot;you are right&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">strLength</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span>str <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型"><span>联合类型</span></a></h3><p>联合类型用|分隔，表示取值可以为多种类型中的一种</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">status</span><span class="token operator">:</span> string <span class="token operator">|</span> number
status <span class="token operator">=</span> <span class="token string">&#39;you are right&#39;</span>
status <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名"><span>类型别名</span></a></h3><p>类型别名用来给一个类型起个新名字。它只是起了一个新名字，并没有创建新类型。类型别名常用于联合类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type count <span class="token operator">=</span> number <span class="token operator">|</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型"><span>交叉类型</span></a></h3><p>交叉类型就是跟联合类型相反，用&amp;操作符表示，交叉类型就是两个类型必须存在</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">IpersonA</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">IpersonB</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">gender</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token literal-property property">person</span><span class="token operator">:</span> IpersonA <span class="token operator">&amp;</span> IpersonB <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Fange&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>person 即是 IpersonA 类型，又是 IpersonB 类型</p><p><strong>注意：</strong> 交叉类型取的多个类型的并集，但是如果 key 相同但是类型不同，则该 key 为 never 类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">IpersonA</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">IpersonB</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">testAndFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> IpersonA <span class="token operator">&amp;</span> IpersonB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">testAndFn</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Fange&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// error TS2322: Type &#39;string&#39; is not assignable to type &#39;never&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-和-interface-的区别" tabindex="-1"><a class="header-anchor" href="#type-和-interface-的区别"><span>type 和 interface 的区别</span></a></h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h3><p><code>type</code> 关键字是声明类型别名的关键字。它的语法如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AliasName</span> <span class="token operator">=</span> Type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>type：声明类型别名的关键字</li><li>AliasName：类型别名的名称</li><li>Type：类型别名关联的具体类型</li></ul><p>想表示 JS 中的原始类型（undefined, null, boolean, string，number）只能交给 type 老大哥</p><h3 id="interface" tabindex="-1"><a class="header-anchor" href="#interface"><span>interface</span></a></h3><p>通过关键字 interface 可以定义一个接口类型。它能合并众多类型声明至一个类型声明。</p><p>接口声明只存在于编译阶段，在编译后生成的 JS 代码中不包含任何接口代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">InterfaceName</span> <span class="token punctuation">{</span>
  TypeMember<span class="token punctuation">;</span>
  TypeMember<span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>interface：</code>定义接口的关键字 <code>InterfaceName：</code>接口名，首字母需要大写 <code>TypeMember</code>：接口的类型成员</p><p>type 可以动态计算属性，interface 没那么强大</p><p>在 interface 中，我们可以这么来表示一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Y</span> <span class="token punctuation">{</span>
   <span class="token punctuation">[</span>k<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

type Keys <span class="token operator">=</span> <span class="token string">&quot;小王&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;小文&quot;</span>

type <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token operator">:</span> string
<span class="token punctuation">}</span>

type <span class="token constant">XX</span> <span class="token operator">=</span> keyof Keys<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Y</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token constant">XX</span><span class="token punctuation">]</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h4><p>都可以用来定义 对象 或者 函数 的结构，而严谨的来说，type 是引用，而 interface 是定义</p><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h4><ul><li>type 在声明类型别名之后实际上是一个赋值操作，它需要将别名与类型关联起来。也就是说类型别名不会创建出一种新的类型，它只是给已有类型命名并直接进行引用。interface 是定义了一个接口类型。</li><li>type 能够表示非对象类型， 而 interface 则只能表示对象类型。</li><li>interface 可以继承其他的接口、类等对象类型， type 不支持继承。</li></ul><blockquote><p>好多文章里都说 type 也支持继承，但是我认为这种说法不严谨。对于类型别名来说，它可以借助交叉类型来实现继承的效果。而且这种方法也只适用于表示对象类型的类型别名，对于非对象类型是无法使用的</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> Shape <span class="token operator">&amp;</span> <span class="token punctuation">{</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>circle<span class="token operator">:</span> Circle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> circle<span class="token punctuation">.</span>name
  <span class="token keyword">const</span> radius <span class="token operator">=</span> circle<span class="token punctuation">.</span>radius
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>interface 接口名总是会直接显示在编译器的诊断信息和代码编辑器的智能提示中，而 type 的名字只在特定情况下才会显示出来——只有当类型别名表示数组类型、元组类型以及类或者接口的泛型实例类型时才展示。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NumericType</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint

<span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
  radius<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>value<span class="token operator">:</span> NumericType<span class="token punctuation">,</span> circle<span class="token operator">:</span> Circle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bar<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> value
  <span class="token comment">//    ~~~</span>
  <span class="token comment">// 	  Type &#39;number | bigint&#39; is not assignable to type &#39;boolean&#39;</span>
  <span class="token comment">// 		这里没有显示类型别名</span>

  <span class="token keyword">const</span> baz<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> circle
  <span class="token comment">// 	  ~~~</span>
  <span class="token comment">// 		Type &#39;Circle&#39; is not assignable to type &#39;boolean&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>interface 具有声明合并的行为，而 type 不会，这也意味着我们可以通过声明合并的方式给 interface 定义的类型进行属性扩展</p></li><li><p>type 可以通过 typeof 来获取实例的类型从而进行赋值操作</p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>对于 type 来说，更多的是对类型的一种复用，比如在项目中需要用到一些比较复杂的或者书写起来很长的类型。我们可以使用 type 来直接引用该类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FType</span> <span class="token operator">=</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而对于 <code>interface</code> 来说，它是正儿八经的用来定义接口类型（约束数类型和属性）的，且接口类型是支持继承和声明合并的。</p><p>所以在对于对象结构的类型定义上，建议尽可能的使用 interface，而在合适的场景使用 type。</p><p>Typescript 更多内容查看<a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener noreferrer">官网</a></p>`,148),o=[t];function l(c,i){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","baseType.html.vue"]]),k=JSON.parse('{"path":"/Front/ts/baseType.html","title":"typescript 类型","lang":"zh-CN","frontmatter":{"icon":"article","category":["TypeScript"],"tag":["TypeScript"],"description":"typescript 类型 基本类型 String 类型 Boolean 类型 Number 类型 Enum 类型 枚举类型用于定义数值集合，使用枚举我们可以定义一些带名字的常量。使用枚举可以清晰地表达意图或创建一组有区别的用例。，如周一到周日，方位上下左右等 普通枚举 初始值默认为 0 其余的成员会会按顺序自动增长 可以理解为数组下标 设置初始值 字...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/ts/baseType.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"typescript 类型"}],["meta",{"property":"og:description","content":"typescript 类型 基本类型 String 类型 Boolean 类型 Number 类型 Enum 类型 枚举类型用于定义数值集合，使用枚举我们可以定义一些带名字的常量。使用枚举可以清晰地表达意图或创建一组有区别的用例。，如周一到周日，方位上下左右等 普通枚举 初始值默认为 0 其余的成员会会按顺序自动增长 可以理解为数组下标 设置初始值 字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-26T08:37:47.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:modified_time","content":"2023-10-26T08:37:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"typescript 类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-26T08:37:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[{"level":3,"title":"String 类型","slug":"string-类型","link":"#string-类型","children":[]},{"level":3,"title":"Boolean 类型","slug":"boolean-类型","link":"#boolean-类型","children":[]},{"level":3,"title":"Number 类型","slug":"number-类型","link":"#number-类型","children":[]},{"level":3,"title":"Enum 类型","slug":"enum-类型","link":"#enum-类型","children":[]},{"level":3,"title":"Array 类型","slug":"array-类型","link":"#array-类型","children":[]},{"level":3,"title":"元组（tuple）类型","slug":"元组-tuple-类型","link":"#元组-tuple-类型","children":[]},{"level":3,"title":"undefined 和 null","slug":"undefined-和-null","link":"#undefined-和-null","children":[]},{"level":3,"title":"any 类型","slug":"any-类型","link":"#any-类型","children":[]},{"level":3,"title":"void 类型","slug":"void-类型","link":"#void-类型","children":[]},{"level":3,"title":"never 类型","slug":"never-类型","link":"#never-类型","children":[]},{"level":3,"title":"Unknown 类型","slug":"unknown-类型","link":"#unknown-类型","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":2,"title":"对象类型","slug":"对象类型","link":"#对象类型","children":[{"level":3,"title":"object","slug":"object","link":"#object","children":[]},{"level":3,"title":"Object","slug":"object-1","link":"#object-1","children":[]},{"level":3,"title":"{}","slug":"","link":"#","children":[]},{"level":3,"title":"类","slug":"类","link":"#类","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"函数重载","slug":"函数重载","link":"#函数重载","children":[]}]},{"level":2,"title":"类型","slug":"类型","link":"#类型","children":[{"level":3,"title":"类型推论","slug":"类型推论","link":"#类型推论","children":[]},{"level":3,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]},{"level":3,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":3,"title":"类型别名","slug":"类型别名","link":"#类型别名","children":[]},{"level":3,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]}]},{"level":2,"title":"type 和 interface 的区别","slug":"type-和-interface-的区别","link":"#type-和-interface-的区别","children":[{"level":3,"title":"type","slug":"type","link":"#type","children":[]},{"level":3,"title":"interface","slug":"interface","link":"#interface","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1661931588000,"updatedTime":1698309467000,"contributors":[{"name":"lfange","email":"653398363@qq.com","commits":4},{"name":"FanGe","email":"653398363@qq.com","commits":3},{"name":"fange","email":"653398363@qq.com","commits":1}]},"readingTime":{"minutes":12.41,"words":3724},"filePathRelative":"Front/ts/baseType.md","localizedDate":"2022年8月31日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
