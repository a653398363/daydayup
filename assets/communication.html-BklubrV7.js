import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-R7pVbBlq.js";const e={},p=t(`<h1 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信"><span>组件通信</span></a></h1><h2 id="父子组件" tabindex="-1"><a class="header-anchor" href="#父子组件"><span>父子组件</span></a></h2><p>父子组件通信主要是<code>props/emit</code>、<code>parent/children</code>、<code>ref</code></p><h3 id="props-emit" tabindex="-1"><a class="header-anchor" href="#props-emit"><span>props/$emit</span></a></h3><p>父组件中，通过给子组件标签v-bind绑定属性的方式传入值</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentName</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ComponentName</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果不使用v-bind传入的值为字符串，使用v-bind绑定传入的值为表达式。</p></blockquote><p>子组件中，通过props对象接收值</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 接收父组件传入值</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> String <span class="token operator">||</span> <span class="token operator">...</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单向数据流" tabindex="-1"><a class="header-anchor" href="#单向数据流"><span>单向数据流</span></a></h4><p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><h4 id="子组件不能直接修改父组件传入的值" tabindex="-1"><a class="header-anchor" href="#子组件不能直接修改父组件传入的值"><span><strong>子组件不能直接修改父组件传入的值</strong></span></a></h4><p>这里有两种常见的试图改变一个 <code>prop</code> 的情形：</p><ol><li>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;initialCounter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">normalizedSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子组件传值给父组件" tabindex="-1"><a class="header-anchor" href="#子组件传值给父组件"><span>子组件传值给父组件</span></a></h3><p><a href="https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">API</a></p><p>子组件通过<code>$emit</code>派发事件和值给父组件（值可以有多个）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;fnX&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>父组件通过<code>v-on</code>绑定子组件派发的事件，并触发一个新的事件，新的事件内可以接收传来的值</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentName</span> <span class="token attr-name">@fnX</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fnY<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ComponentName</span><span class="token punctuation">&gt;</span></span>

methods: {
	fnY(value) {
		console.log(value)
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="父组件调用子组件方法传入值" tabindex="-1"><a class="header-anchor" href="#父组件调用子组件方法传入值"><span>父组件调用子组件方法传入值</span></a></h3><p>通过<code>ref</code>引用调用子组件内的方法并传入参数</p><p>父组件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>子组件标签  ref<span class="token operator">=</span><span class="token string">&quot;refName&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>子组件标签<span class="token operator">&gt;</span>

<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">fnX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>refName<span class="token punctuation">.</span><span class="token function">fnY</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 调用子组件方法并传入值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">fnY</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="向子-孙组件传值" tabindex="-1"><a class="header-anchor" href="#向子-孙组件传值"><span>向子|孙组件传值</span></a></h2><p>向子孙传值主要是用<code>attrs/$listeners</code>、<code>provide/inject API</code>、<code>Vuex</code></p><h3 id="attrs-listeners" tabindex="-1"><a class="header-anchor" href="#attrs-listeners"><span>$attrs/$listeners</span></a></h3><p>用在父组件传递数据给子组件或者孙组件，<code>$attrs</code>继承所有的父组件属性（除了<code>prop</code>传递的属性、<code>class</code>和<code>style</code>）</p><p>当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=&quot;$attrs&quot; 传入内部组件。通常配合 inheritAttrs 选项一起使用。</p><p><code>$listeners</code>是一个对象，包含了父作用域中的v-on事件监听器，可以配合v-on=&quot;$listeners&quot;将所有的事件监听器指向这个组件的某个特定的子元素</p><h3 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject"><span>provide/inject</span></a></h3><p>祖先组件中通过provider来提供变量，然后在孙组件中通过inject来注入变量</p><p>procide/inject API主要解决了跨域组件间的通讯问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系</p><h2 id="非父子组件间传值" tabindex="-1"><a class="header-anchor" href="#非父子组件间传值"><span>非父子组件间传值</span></a></h2><p>子组件1中把值传到父组件,父组件获取值传入子组件2</p><p>父组件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>子组件<span class="token number">1</span> @方法名x<span class="token operator">=</span><span class="token string">&quot;方法名y&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>子组件<span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>子组件<span class="token number">2</span> <span class="token operator">:</span>值名称x<span class="token operator">=</span><span class="token string">&quot;值x&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>子组件<span class="token number">2</span> <span class="token operator">&gt;</span>
<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
	 <span class="token literal-property property">值x</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token function">方法名y</span><span class="token punctuation">(</span><span class="token parameter">值</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>值x <span class="token operator">=</span> 值
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件1：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;方法名x&#39;</span><span class="token punctuation">,</span> 值<span class="token punctuation">)</span> <span class="token comment">// 传出值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子组件2：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">值名称x</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 接收父组件传入值</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当组件的嵌套多时，非父子组件间传值就显得复杂，除了上面的方法和使用<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">vuex</a>实现之外，还可以通过<code>eventBus</code>（或者叫 总线/发布订阅模式/观察者模式）的方式实现非父子组件间传值。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child1</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>组件1：点我传出值<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child2</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>组件2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 每个Vue原型上都会有bus属性,而且指向同一个Vue实例</span>
	Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;child1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">content</span><span class="token operator">:</span> String
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button @click=&quot;handleClick&quot;&gt;{{content}}&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;我是组件1过来的~&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 触发change事件，传出值</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;child2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
		<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">childVal</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">content</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button&gt;{{content}} + {{childVal}}&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
		<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 绑定change事件，执行函数接收值</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>childVal <span class="token operator">=</span> msg
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，在Vue原型上绑定一个<code>eventbus</code>属性，指向一个Vue实例，之后每个Vue实例都会有一个<code>eventbus</code>属性。</p><blockquote><p>此方法传值，不限于兄弟组件之间，其他关系组件间都适用。</p></blockquote>`,50),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","communication.html.vue"]]),k=JSON.parse('{"path":"/Front/Vue/basic/communication.html","title":"组件通信","lang":"zh-CN","frontmatter":{"description":"父子组件 父子组件通信主要是props/emit、parent/children、ref props/$emit 父组件中，通过给子组件标签v-bind绑定属性的方式传入值 如果不使用v-bind传入的值为字符串，使用v-bind绑定传入的值为表达式。","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/Vue/basic/communication.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"组件通信"}],["meta",{"property":"og:description","content":"父子组件 父子组件通信主要是props/emit、parent/children、ref props/$emit 父组件中，通过给子组件标签v-bind绑定属性的方式传入值 如果不使用v-bind传入的值为字符串，使用v-bind绑定传入的值为表达式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-21T14:21:10.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:modified_time","content":"2022-09-21T14:21:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件通信\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-21T14:21:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"父子组件","slug":"父子组件","link":"#父子组件","children":[{"level":3,"title":"props/$emit","slug":"props-emit","link":"#props-emit","children":[]},{"level":3,"title":"子组件传值给父组件","slug":"子组件传值给父组件","link":"#子组件传值给父组件","children":[]},{"level":3,"title":"父组件调用子组件方法传入值","slug":"父组件调用子组件方法传入值","link":"#父组件调用子组件方法传入值","children":[]}]},{"level":2,"title":"向子|孙组件传值","slug":"向子-孙组件传值","link":"#向子-孙组件传值","children":[{"level":3,"title":"$attrs/$listeners","slug":"attrs-listeners","link":"#attrs-listeners","children":[]},{"level":3,"title":"provide/inject","slug":"provide-inject","link":"#provide-inject","children":[]}]},{"level":2,"title":"非父子组件间传值","slug":"非父子组件间传值","link":"#非父子组件间传值","children":[]}],"git":{"createdTime":1646386211000,"updatedTime":1663770070000,"contributors":[{"name":"FanGe","email":"653398363@qq.com","commits":8}]},"readingTime":{"minutes":3.95,"words":1184},"filePathRelative":"Front/Vue/basic/communication.md","localizedDate":"2022年3月4日","excerpt":"\\n<h2>父子组件</h2>\\n<p>父子组件通信主要是<code>props/emit</code>、<code>parent/children</code>、<code>ref</code></p>\\n<h3>props/$emit</h3>\\n<p>父组件中，通过给子组件标签v-bind绑定属性的方式传入值</p>\\n<div class=\\"language-html\\" data-ext=\\"html\\" data-title=\\"html\\"><pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ComponentName</span> <span class=\\"token attr-name\\"><span class=\\"token namespace\\">v-bind:</span>name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>value<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ComponentName</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre></div><blockquote>\\n<p>如果不使用v-bind传入的值为字符串，使用v-bind绑定传入的值为表达式。</p>\\n</blockquote>\\n","autoDesc":true}');export{d as comp,k as data};
