import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-R7pVbBlq.js";const t={},p=e(`<h2 id="slice-类型切片" tabindex="-1"><a class="header-anchor" href="#slice-类型切片"><span>slice 类型切片</span></a></h2><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(&quot;动态数组&quot;)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> identifier <span class="token punctuation">[</span><span class="token punctuation">]</span>type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span>type <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>type<span class="token punctuation">,</span> len<span class="token punctuation">)</span>
也可以简写为
<span class="token literal-property property">slice1</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>type<span class="token punctuation">,</span> len<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-Go line-numbers-mode" data-ext="Go" data-title="Go"><pre class="language-Go"><code>s :=make([]int,len,cap)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过内置函数 <code>make()</code> 初始化切片<code>s</code>，<code>[]int</code> 标识为其元素类型为 <code>int</code> 的切片<br> 切片是可索引的，并且可以由 len() 方法获取长度。</p><p>切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。</p><h3 id="nil" tabindex="-1"><a class="header-anchor" href="#nil"><span>nil</span></a></h3><p>一个切片在未初始化之前默认为 nil，长度为 0</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><p><code>Map</code> 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p><p><code>Map</code> 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是<strong>无序的</strong>，我们无法决定它的返回顺序，这是因为 Map 是使用 hash 表来实现的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 声明变量，默认 map 是 nil */</span>
<span class="token keyword">var</span> map_variable map<span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type

<span class="token comment">/* 使用 make 函数 */</span>
<span class="token literal-property property">map_variable</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 定义接口 */</span>
type interface_name <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   method_name1 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
   method_name2 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
   method_name3 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
   <span class="token operator">...</span>
   method_namen <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 定义结构体 */</span>
type struct_name struct <span class="token punctuation">{</span>
   <span class="token comment">/* variables */</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 实现接口方法 */</span>
<span class="token function">func</span> <span class="token punctuation">(</span>struct_name_variable struct_name<span class="token punctuation">)</span> <span class="token function">method_name1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span> <span class="token punctuation">{</span>
   <span class="token comment">/* 方法实现 */</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token function">func</span> <span class="token punctuation">(</span>struct_name_variable struct_name<span class="token punctuation">)</span> <span class="token function">method_namen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span> <span class="token punctuation">{</span>
   <span class="token comment">/* 方法实现*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通道" tabindex="-1"><a class="header-anchor" href="#通道"><span>通道</span></a></h2><p>通道（channel）是用来传递数据的一个数据结构</p><p>通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 &lt;- 用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ch <span class="token operator">&lt;</span><span class="token operator">-</span> v    <span class="token comment">// 把 v 发送到通道 ch</span>
<span class="token literal-property property">v</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">-</span>ch  <span class="token comment">// 从 ch 接收数据</span>
           <span class="token comment">// 并把值赋给 v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),i=[p];function c(o,l){return a(),s("div",null,i)}const d=n(t,[["render",c],["__file","Tutorial.html.vue"]]),m=JSON.parse('{"path":"/backend/Golang/Tutorial.html","title":"Tutorial","lang":"zh-CN","frontmatter":{"icon":"back-stage","title":"Tutorial","category":["后端"],"tag":["Golang"],"description":"slice 类型切片 Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\\"动态数组\\")，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。 初始化 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片 切片是可索引的，并且可以由 le...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/backend/Golang/Tutorial.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"Tutorial"}],["meta",{"property":"og:description","content":"slice 类型切片 Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(\\"动态数组\\")，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。 初始化 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片 切片是可索引的，并且可以由 le..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"Golang"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tutorial\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"slice 类型切片","slug":"slice-类型切片","link":"#slice-类型切片","children":[{"level":3,"title":"nil","slug":"nil","link":"#nil","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":2,"title":"通道","slug":"通道","link":"#通道","children":[]}],"git":{"createdTime":1664352974000,"updatedTime":1680096943000,"contributors":[{"name":"FanGe","email":"653398363@qq.com","commits":3}]},"readingTime":{"minutes":1.95,"words":584},"filePathRelative":"backend/Golang/Tutorial.md","localizedDate":"2022年9月28日","excerpt":"","autoDesc":true}');export{d as comp,m as data};
