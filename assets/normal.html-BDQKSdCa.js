import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-R7pVbBlq.js";const e={},p=t(`<h1 id="day" tabindex="-1"><a class="header-anchor" href="#day"><span>day</span></a></h1><h2 id="返回两个数组中相同的值" tabindex="-1"><a class="header-anchor" href="#返回两个数组中相同的值"><span>返回两个数组中相同的值</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">ar1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arr1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
  arr2<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span>p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      p2<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      p1<span class="token operator">++</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span>
      p1<span class="token operator">++</span>
      p2<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h2><p><code>Object.assign</code>、<code>...</code>、<code>slice</code>、<code>concat</code>, 默认是对对象进行深拷贝的，但是我们需要注意的是，它只对最外层的进行深拷贝，也就是当对象内嵌套有对象的时候，被嵌套的对象进行的还是浅拷贝</p><h3 id="json-parse-json-stringify-obj" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringify-obj"><span>JSON.parse(JSON.stringify(obj))</span></a></h3><p><code>JSON.parse(JSON.stringify(obj))</code>一种深拷贝的方式，一般大部分的深拷贝都可以用 JSON 的方式进行解决，本质是因为 JSON 会自己去构建新的内存来存放新对象</p><ul><li>会忽略 undefined 和 symbol；</li><li>不可以对 Function 进行拷贝，因为 JSON 格式字符串不支持 Function，在序列化的时候会自动删除；</li><li>诸如 Map, Set, RegExp, Date, ArrayBuffer 和其他内置类型在进行序列化时会丢失；</li><li>不支持循环引用对象的拷贝;（循环引用的可以大概地理解为一个对象里面的某一个属性的值是它自己）</li></ul>`,8),o=[p];function c(i,r){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","normal.html.vue"]]),k=JSON.parse('{"path":"/Front/JavaScript/normal.html","title":"day","lang":"zh-CN","frontmatter":{"icon":"article","category":["JavaScript"],"tag":["Interview"],"description":"day 返回两个数组中相同的值 深拷贝 Object.assign、...、slice、concat, 默认是对对象进行深拷贝的，但是我们需要注意的是，它只对最外层的进行深拷贝，也就是当对象内嵌套有对象的时候，被嵌套的对象进行的还是浅拷贝 JSON.parse(JSON.stringify(obj)) JSON.parse(JSON.stringify...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/JavaScript/normal.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"day"}],["meta",{"property":"og:description","content":"day 返回两个数组中相同的值 深拷贝 Object.assign、...、slice、concat, 默认是对对象进行深拷贝的，但是我们需要注意的是，它只对最外层的进行深拷贝，也就是当对象内嵌套有对象的时候，被嵌套的对象进行的还是浅拷贝 JSON.parse(JSON.stringify(obj)) JSON.parse(JSON.stringify..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"Interview"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"day\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"返回两个数组中相同的值","slug":"返回两个数组中相同的值","link":"#返回两个数组中相同的值","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[{"level":3,"title":"JSON.parse(JSON.stringify(obj))","slug":"json-parse-json-stringify-obj","link":"#json-parse-json-stringify-obj","children":[]}]}],"git":{"createdTime":1675735897000,"updatedTime":1680096943000,"contributors":[{"name":"FanGe","email":"653398363@qq.com","commits":1},{"name":"WEB-汪妮","email":"2556639124@qq.com","commits":1}]},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"Front/JavaScript/normal.md","localizedDate":"2023年2月7日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
