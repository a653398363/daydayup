import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as e}from"./app-R7pVbBlq.js";const t="/assets/husky-7ZFwkL0y.png",p="/assets/ctrls-CNuf0EsF.png",i="/assets/640-DUYFyx-1.png",o={},l=e(`<h1 id="前端代码规范" tabindex="-1"><a class="header-anchor" href="#前端代码规范"><span>前端代码规范</span></a></h1><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>ESlint</span></a></h2><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener noreferrer">eslint</a> 是 <code>JavaScript</code> 一个代码检测工具，用于检测代码中潜在的问题和错误，作用提高代码质量和规范。</p><h3 id="安装-eslint" tabindex="-1"><a class="header-anchor" href="#安装-eslint"><span>安装 eslint</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pnpm add eslint <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速构建-eslint-配置文件" tabindex="-1"><a class="header-anchor" href="#快速构建-eslint-配置文件"><span>快速构建 eslint 配置文件</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pnpm init @eslint<span class="token operator">/</span>config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完成后，自动生成 eslint 配置文件 <code>.eslintrc.js</code> 可在 <code>.eslintrc.js</code> 中配置 rules 定义校验规则</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">indent</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用于指定代码缩进的方式，这里配置为使用四个空格进行缩进。</span>
        <span class="token string-property property">&#39;linebreak-style&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;windows&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用于指定换行符的风格，这里配置为使用 Windows 风格的换行符（\\r\\n）。</span>
        <span class="token literal-property property">quotes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;single&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 用于指定字符串的引号风格，这里配置为使用单引号作为字符串的引号。</span>
        <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//用于指定是否需要在语句末尾添加分号，这里配置为必须始终添加分号。</span>
        <span class="token string-property property">&#39;@typescript-eslint/no-explicit-any&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;off&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 用于配置 TypeScript 中的 &quot;any&quot; 类型的使用规则，这里配置为关闭禁止显式使用 &quot;any&quot; 类型的检查。</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="husky" tabindex="-1"><a class="header-anchor" href="#husky"><span>husky</span></a></h2><p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener noreferrer">husky</a> 是一个 Git 钩子（Git hooks）工具，它可以让你在 Git 事件发生时执行脚本，进行代码格式化、测试等操作。</p><ul><li><code>pre-commit</code>：在执行 Git commit 命令之前触发，用于在提交代码前进行代码检查、格式化、测试等操作。</li><li><code>commit-msg</code>：在提交消息（commit message）被创建后，但提交操作尚未完成之前触发，用于校验提交消息的格式和内容。</li><li><code>pre-push</code>：在执行 Git push 命令之前触发，用于在推送代码前进行额外检查、测试等操作。</li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>注意！需要在 .git 文件同目录下安装 husky，否则无法识别环境导致安装失败！</p><h4 id="在项目根目录下运行以下命令安装-husky" tabindex="-1"><a class="header-anchor" href="#在项目根目录下运行以下命令安装-husky"><span>在项目根目录下运行以下命令安装 <code>husky</code></span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pnpm add husky <span class="token operator">--</span>save<span class="token operator">-</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="启用-git-钩子" tabindex="-1"><a class="header-anchor" href="#启用-git-钩子"><span>启用 git 钩子</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm pkg <span class="token keyword">set</span> scripts<span class="token punctuation">.</span>prepare<span class="token operator">=</span><span class="token string">&quot;husky install&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装成功后会在 package.json 文件中 script 中生成命令</p><p>注意！如为自动生成需手动添加，将以下内容粘贴到 package.json 文件中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建-husky-目录-执行如下代码" tabindex="-1"><a class="header-anchor" href="#创建-husky-目录-执行如下代码"><span>创建.husky 目录，执行如下代码</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm run prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行成功后，项目中生成一个 .husky 目录</p><p><img src="`+t+`" alt="husky" loading="lazy"></p><p>注意！如未生成 .husky 目录，推荐使用命令 npx husky install</p><h3 id="创建-git-挂钩" tabindex="-1"><a class="header-anchor" href="#创建-git-挂钩"><span>创建 Git 挂钩</span></a></h3><h4 id="pre-commit" tabindex="-1"><a class="header-anchor" href="#pre-commit"><span>pre-commit</span></a></h4><p>在 Git 提交之前做 eslint 语法校验 。</p><ol><li>创建钩子脚本文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>pre<span class="token operator">-</span>commit <span class="token string">&quot;npx lint-staged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执执行成功，.husky 目录多出一个 pre-commit 文件</p><p>注意！window 电脑输入后，可能会报错如下</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">Usage</span><span class="token operator">:</span>
  husky install <span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">.</span>husky<span class="token punctuation">)</span>
  husky uninstall
  husky set<span class="token operator">|</span>add <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token punctuation">[</span>cmd<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方式，删除 &quot;npm test&quot; 重新执行 <code>npx husky add .husky/commit-msg</code></p><ol start="2"><li>配置代码检测</li></ol><p>git 提交前，执行 pre-commit 钩子脚本，进行校验代码语法、格式修复等操作。</p><ul><li>打开 pre-commit 文件，内容如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env sh</span>
<span class="token punctuation">.</span> <span class="token string">&quot;$(dirname -- &quot;</span>$0<span class="token string">&quot;)/_/husky.sh&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>下方代码添加到 pre-commit 文件中。lint-staged 模块， 用于对 git 暂存区检测</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npx <span class="token operator">--</span>no<span class="token operator">-</span>install lint<span class="token operator">-</span>staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>npx --no-install lint-staged 是一个命令，用于在不安装 lint-staged 的情况下运行该工具。</p><p>npx --no-install 命令用于从远程下载并执行指定的命令。</p></div><h2 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged"><span>lint-staged</span></a></h2><ul><li>作用： <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer">lint-staged</a> 可以让你在 Git 暂存（staged）区域中的文件上运行脚本，通常用于在提交前对代码进行格式化、静态检查等操作。</li><li>使用方式：你可以在项目中使用 <code>lint-staged</code> 配合 husky 钩子来执行针对暂存文件的脚本。具体的使用步骤如下：</li></ul><h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1"><span>安装</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pnpm add lint<span class="token operator">-</span>staged <span class="token operator">--</span>save<span class="token operator">-</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 package.json 文件中添加以下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// src/**/*.{js,jsx,ts,tsx} 校验暂存区、指定目录下的文件类型</span>
    <span class="token comment">// 校验命令，执行 eslint 、prettier</span>
    <span class="token string-property property">&quot;src/**/*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;eslint --fix&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&quot;src/\\*_/_.{js,jsx,ts,tsx}&quot;</code> 是指定要针对的暂存文件模式，你可以根据自己的项目需求来配置。</li><li><code>[&quot;prettier --write&quot;,&quot;eslint --fix&quot;]</code> 为校验命令，可执行 eslint 、prettier 等规则</li></ul><h2 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier"><span>prettier</span></a></h2><p><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener noreferrer">prettier</a> 是一个代码格式化工具。 prettier 与上述 husky 和 lint-staged 搭配使用，可以在提交代码之前自动格式化代码。具体的使用步骤如下：</p><h3 id="安装-2" tabindex="-1"><a class="header-anchor" href="#安装-2"><span>安装</span></a></h3><p>在项目根目录下运行以下命令安装 prettier：</p><p><code>pnpm add prettier --save-dev</code> 建 .prettierrc.js 文件，并定义你想要的代码样式，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//强制在语句末尾使用分号。</span>
  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span> <span class="token comment">//不允许在多行结构的最后一个元素或属性后添加逗号。</span>
  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用单引号而不是双引号来定义字符串。</span>
  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token comment">//指定每行代码的最大字符宽度，超过这个宽度的代码将被换行</span>
  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">//指定一个制表符（Tab）等于多少个空格。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的配置选项根据你的需求定义，具体选项可以参考 prettier 文档。在 lint-staged 的配置中添加 &quot;prettier --write&quot;，例如</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// src/**/*.{js,jsx,ts,tsx} 校验暂存区、指定目录下的文件类型</span>
    <span class="token comment">// 校验命令，执行 eslint 、prettier</span>
    <span class="token string-property property">&quot;src/**/*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;eslint --fix&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code-自动保存" tabindex="-1"><a class="header-anchor" href="#code-自动保存"><span>code 自动保存</span></a></h2><p>第一种，在 vscode 设置里面配置 点击 Vscode 的设置=&gt;工作区=&gt;文本编辑器</p><p><img src="`+p+`" alt="ctrls" loading="lazy"></p><p>安装步骤</p><h2 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen"><span>Commitizen</span></a></h2><p><a href="https://github.com/commitizen-tools/commitizen" target="_blank" rel="noopener noreferrer">Commitizen</a>是一个命令行工具，用于以一致的方式编写规范的提交消息。在使用 Commitizen 之前，你需要安装 Commitizen 及其适配器。</p><h3 id="安装和使用步骤" tabindex="-1"><a class="header-anchor" href="#安装和使用步骤"><span>安装和使用步骤</span></a></h3><ul><li>确保你的项目已经初始化并安装了 pnpm。打开命令行终端，并在项目根目录下运行以下命令来安装 commitizen 和 cz-conventional-changelog：使用 pnpm：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pnpm add <span class="token operator">--</span>save<span class="token operator">-</span>dev commitizen cz<span class="token operator">-</span>conventional<span class="token operator">-</span>changelog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>安装完成后，在 package.json 中添加一个 config.commitizen 的字段，并设置它的值为 cz-conventional-changelog。示例如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz-conventional-changelog&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>package.json</code> 中的 scripts 字段中添加一个 <code>commit</code> 的命令。示例如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git-cz&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这将允许你使用 <code>npm run commit</code> 或 <code>pnpm commit</code> 命令来进行交互式的提交</li></ul><p>现在，你可以使用 <code>npm run commit</code> 或 <code>pnpm commit</code> 命令来进行提交。这将打开一个交互式的界面，引导你填写提交消息。</p><p>如：</p><ol><li>提交修改文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>git add <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>开始交互式提交，填写规范信息</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm run commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>选择提交类型</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">?</span> Select the type <span class="token keyword">of</span> change that you&#39;re committing<span class="token operator">:</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> feat<span class="token operator">:</span>     <span class="token constant">A</span> <span class="token keyword">new</span> <span class="token class-name">feature</span> <span class="token comment">//新功能</span>
  <span class="token literal-property property">fix</span><span class="token operator">:</span>      <span class="token constant">A</span> bug fix <span class="token comment">//错误修复</span>
  <span class="token literal-property property">docs</span><span class="token operator">:</span>     Documentation only changes <span class="token comment">//仅文档更改</span>
  <span class="token literal-property property">style</span><span class="token operator">:</span>    <span class="token punctuation">[</span>样式<span class="token punctuation">]</span>Changes that <span class="token keyword">do</span> not affect the meaning <span class="token keyword">of</span> the <span class="token function">code</span> <span class="token punctuation">(</span>white<span class="token operator">-</span>space<span class="token punctuation">,</span> formatting<span class="token punctuation">,</span> missing semi<span class="token operator">-</span>colons<span class="token punctuation">,</span> etc<span class="token punctuation">)</span>
  <span class="token literal-property property">refactor</span><span class="token operator">:</span> <span class="token punctuation">[</span>重构<span class="token punctuation">]</span> <span class="token constant">A</span> code change that neither fixes a bug nor adds a feature
  <span class="token literal-property property">perf</span><span class="token operator">:</span>     <span class="token constant">A</span> code change that improves performance
  <span class="token literal-property property">test</span><span class="token operator">:</span>     Adding missing tests or correcting existing tests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>根据提示填写内容，可选择空格跳过</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">?</span> What is the scope <span class="token keyword">of</span> <span class="token keyword">this</span> change <span class="token comment">// 此更改的范围是什么</span>
<span class="token operator">?</span> Write a short<span class="token punctuation">,</span> imperative tense description <span class="token keyword">of</span> the change<span class="token comment">//【必填】 简短的描述这个变化</span>
<span class="token operator">?</span> Provide a longer description <span class="token keyword">of</span> the change<span class="token comment">//提供变更的详细说明：</span>
<span class="token operator">?</span> Are there any breaking changes<span class="token operator">?</span> <span class="token comment">//有什么突破性的变化吗？【y/n】</span>
<span class="token operator">?</span> Does <span class="token keyword">this</span> change affect any open issues<span class="token operator">?</span> <span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token constant">N</span><span class="token punctuation">)</span> <span class="token comment">//此更改是否会影响任何悬而未决的问题（是/否）</span>

<span class="token comment">// 完成提交，输出打印日志：</span>
<span class="token punctuation">[</span>master 2cf55e0<span class="token punctuation">]</span> docs<span class="token operator">:</span> 修改commitzen文档
 <span class="token number">1</span> file changed<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">deletions</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你完成提交消息后，Commitizen 会自动生成符合规范的提交消息，并将其添加到 Git commit 中。根据 cz-conventional-changelog 的规范，提交消息需要包括类型（type）、范围（scope）、简短的描述（subject）和可选的详细描述（body）。</p><h2 id="冲突" tabindex="-1"><a class="header-anchor" href="#冲突"><span>冲突</span></a></h2><h3 id="eslint-和-prettier-冲突" tabindex="-1"><a class="header-anchor" href="#eslint-和-prettier-冲突"><span>ESLint 和 Prettier 冲突</span></a></h3><p>有时，ESLint 的规则和 Prettier 的规则可能存在冲突，导致代码格式化不一致。使用 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener noreferrer">eslint-config-prettier</a> 可以关闭 ESLint 中与 Prettier 冲突的规则。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pnpm add eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>prettier <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>eslint-config-prettier</code> ：关闭 eslint 中与 prettier 相互冲突的规则</li><li><code>eslint-plugin-prettier</code> : 允许 eslint 用 prettier 格式化代码的能力。安装依赖并修改.eslintrc 文件</li></ul><p>在 <code>.eslintrc.js</code> 文件中，在 extends 配置基础上，追加内容</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// .eslintrc</span>
<span class="token punctuation">{</span>
   <span class="token comment">//</span>
 <span class="token operator">-</span> <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 原先配置</span>
 <span class="token operator">+</span> <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 添加配置</span>
  <span class="token comment">// 其余的配置</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，plugins 配置基础上，追加 prettier</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;prettier&quot;</span> <span class="token comment">// 添加 prettier 插件 ],</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="typescript-eslint-dot-notation" tabindex="-1"><a class="header-anchor" href="#typescript-eslint-dot-notation"><span>@typescript-eslint/dot-notation</span></a></h3><ul><li>错误日志：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">Error</span><span class="token operator">:</span> Error <span class="token keyword">while</span> loading rule <span class="token string">&#39;@typescript-eslint/dot-notation&#39;</span><span class="token operator">:</span>
You have used a rule which requires parserServices to be generated<span class="token punctuation">.</span> You must therefore provide a value <span class="token keyword">for</span> the <span class="token string">&quot;parserOptions.project&quot;</span> property <span class="token keyword">for</span> @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>parser<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>错误原因</li></ul><p>这个错误是由于在使用 @typescript-eslint/dot-notation 规则时，没有为 @typescript-eslint/parser 提供正确的 parserOptions.project 属性值引起的。</p><ul><li>解决方式</li></ul><p>eslint 配置文件中，设置一个有效的 parserOptions.project ，指向你的 TypeScript 配置文件（tsconfig.json）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token string">&#39;./tsconfig.json&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript-eslint-uniquely" tabindex="-1"><a class="header-anchor" href="#typescript-eslint-uniquely"><span>@typescript-eslint&quot; uniquely.</span></a></h3><ul><li>错误日志：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ESLint couldn&#39;t determine the plugin <span class="token string">&quot;@typescript-eslint&quot;</span> uniquely<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>解决方式</li></ul><ol><li>重新安装 eslint 相关依赖</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm cache clean <span class="token operator">--</span>force <span class="token comment">//先清除缓存依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev eslint @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>eslint<span class="token operator">-</span>plugin @typescript<span class="token operator">-</span>eslint<span class="token operator">/</span>parser prettier eslint<span class="token operator">-</span>config<span class="token operator">-</span>prettier eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>.eslintrc.js</code> 文件，配置 root：true</li></ol><p>root 被设置为 true 时，ESLint 使用当前配置文件作为根配，将停止在父级目录中查找其他配置文件。</p><p><img src="`+i+`" alt="root" loading="lazy"></p><h3 id="warning-react-version-not-specified" tabindex="-1"><a class="header-anchor" href="#warning-react-version-not-specified"><span>Warning: React version not specified</span></a></h3><p>使用了 eslint-plugin-react 插件，未在配置文件中指定 React 版本，会遇到下述警告信息。</p><p><strong>Warning: React version not specified in eslint-plugin-react settings. See https://github.com/jsx-eslint/eslint-plugin-react#configuration .</strong></p><p>在 .eslintrc.js 添加声明</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;react&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;detect&quot;</span> <span class="token comment">//detect 自动检测react版本</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,114),r=[l];function c(d,u){return n(),a("div",null,r)}const k=s(o,[["render",c],["__file","lint.html.vue"]]),g=JSON.parse('{"path":"/Front/enginee/lint.html","title":"前端代码规范","lang":"zh-CN","frontmatter":{"description":"前端代码规范 ESlint eslint 是 JavaScript 一个代码检测工具，用于检测代码中潜在的问题和错误，作用提高代码质量和规范。 安装 eslint 快速构建 eslint 配置文件 执行完成后，自动生成 eslint 配置文件 .eslintrc.js 可在 .eslintrc.js 中配置 rules 定义校验规则 husky hus...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/enginee/lint.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"前端代码规范"}],["meta",{"property":"og:description","content":"前端代码规范 ESlint eslint 是 JavaScript 一个代码检测工具，用于检测代码中潜在的问题和错误，作用提高代码质量和规范。 安装 eslint 快速构建 eslint 配置文件 执行完成后，自动生成 eslint 配置文件 .eslintrc.js 可在 .eslintrc.js 中配置 rules 定义校验规则 husky hus..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-27T07:11:05.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:modified_time","content":"2023-09-27T07:11:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端代码规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-27T07:11:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"ESlint","slug":"eslint","link":"#eslint","children":[{"level":3,"title":"安装 eslint","slug":"安装-eslint","link":"#安装-eslint","children":[]},{"level":3,"title":"快速构建 eslint 配置文件","slug":"快速构建-eslint-配置文件","link":"#快速构建-eslint-配置文件","children":[]}]},{"level":2,"title":"husky","slug":"husky","link":"#husky","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"创建 Git 挂钩","slug":"创建-git-挂钩","link":"#创建-git-挂钩","children":[]}]},{"level":2,"title":"lint-staged","slug":"lint-staged","link":"#lint-staged","children":[{"level":3,"title":"安装","slug":"安装-1","link":"#安装-1","children":[]}]},{"level":2,"title":"prettier","slug":"prettier","link":"#prettier","children":[{"level":3,"title":"安装","slug":"安装-2","link":"#安装-2","children":[]}]},{"level":2,"title":"code 自动保存","slug":"code-自动保存","link":"#code-自动保存","children":[]},{"level":2,"title":"Commitizen","slug":"commitizen","link":"#commitizen","children":[{"level":3,"title":"安装和使用步骤","slug":"安装和使用步骤","link":"#安装和使用步骤","children":[]}]},{"level":2,"title":"冲突","slug":"冲突","link":"#冲突","children":[{"level":3,"title":"ESLint 和 Prettier 冲突","slug":"eslint-和-prettier-冲突","link":"#eslint-和-prettier-冲突","children":[]},{"level":3,"title":"@typescript-eslint/dot-notation","slug":"typescript-eslint-dot-notation","link":"#typescript-eslint-dot-notation","children":[]},{"level":3,"title":"@typescript-eslint\\" uniquely.","slug":"typescript-eslint-uniquely","link":"#typescript-eslint-uniquely","children":[]},{"level":3,"title":"Warning: React version not specified","slug":"warning-react-version-not-specified","link":"#warning-react-version-not-specified","children":[]}]}],"git":{"createdTime":1695194237000,"updatedTime":1695798665000,"contributors":[{"name":"lfange","email":"653398363@qq.com","commits":2}]},"readingTime":{"minutes":7.93,"words":2380},"filePathRelative":"Front/enginee/lint.md","localizedDate":"2023年9月20日","excerpt":"","autoDesc":true}');export{k as comp,g as data};
