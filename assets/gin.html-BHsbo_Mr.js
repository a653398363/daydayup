import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-R7pVbBlq.js";const p={},e=t(`<h2 id="路由拆分" tabindex="-1"><a class="header-anchor" href="#路由拆分"><span>路由拆分</span></a></h2><p>当项目的规模增大后就不太适合继续在项目的 main.go 文件中去实现路由注册相关逻辑了，我们会倾向于把路由部分的代码都拆分出来，形成一个单独的文件或包： routers.go</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;net/http&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

func <span class="token function">helloHandler</span><span class="token punctuation">(</span><span class="token parameter">c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">{</span>
		<span class="token string-property property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello q1mi!&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

func <span class="token function">setupRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 main.go 中调用上面定义好的<code>setupRouter</code>函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">setupRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token literal-property property">err</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;startup service failed, err:%v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的目录结构：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>gin_demo
├── go<span class="token punctuation">.</span>mod
├── go<span class="token punctuation">.</span>sum
├── main<span class="token punctuation">.</span>go
└── routers<span class="token punctuation">.</span>go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把路由部分的代码单独拆分成包的话也是可以的，拆分后的目录结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>gin_demo
├── go<span class="token punctuation">.</span>mod
├── go<span class="token punctuation">.</span>sum
├── main<span class="token punctuation">.</span>go
└── routers
    └── routers<span class="token punctuation">.</span>go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>routers/routers.go 需要注意此时<code>setupRouter</code>需要改成首字母大写</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">package</span> routers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;net/http&quot;</span>

	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

func <span class="token function">helloHandler</span><span class="token punctuation">(</span><span class="token parameter">c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">{</span>
		<span class="token string-property property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello q1mi!&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// SetupRouter 配置路由信息</span>
func <span class="token function">SetupRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.go 文件内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;gin_demo/routers&quot;</span>
<span class="token punctuation">)</span>

func <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> routers<span class="token punctuation">.</span><span class="token function">SetupRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token literal-property property">err</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;startup service failed, err:%v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由拆分成多个文件" tabindex="-1"><a class="header-anchor" href="#路由拆分成多个文件"><span>路由拆分成多个文件</span></a></h2><p>当我们的业务规模继续膨胀，单独的一个 routers 文件或包已经满足不了我们的需求了，</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">SetupRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	r<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span>
  r<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/xx1&quot;</span><span class="token punctuation">,</span> xxHandler1<span class="token punctuation">)</span>
  <span class="token operator">...</span>
  r<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/xx30&quot;</span><span class="token punctuation">,</span> xxHandler30<span class="token punctuation">)</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们把所有的路由注册都写在一个 SetupRouter 函数中的话就会太复杂了。</p><p>我们可以分开定义多个路由文件，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>gin_demo
├── go<span class="token punctuation">.</span>mod
├── go<span class="token punctuation">.</span>sum
├── main<span class="token punctuation">.</span>go
└── routers
    ├── blog<span class="token punctuation">.</span>go
    └── shop<span class="token punctuation">.</span>go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>routers/shop.go 中添加一个 LoadShop 的函数，将 shop 相关的路由注册到指定的路由器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">LoadShop</span><span class="token punctuation">(</span><span class="token parameter">e <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/goods&quot;</span><span class="token punctuation">,</span> goodsHandler<span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/checkout&quot;</span><span class="token punctuation">,</span> checkoutHandler<span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>routers/blog.go 中添加一个\`LoadBlog 的函数，将 blog 相关的路由注册到指定的路由器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">LoadBlog</span><span class="token punctuation">(</span><span class="token parameter">e <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">,</span> postHandler<span class="token punctuation">)</span>
  e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/comment&quot;</span><span class="token punctuation">,</span> commentHandler<span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 main 函数中实现最终的注册逻辑如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	routers<span class="token punctuation">.</span><span class="token function">LoadBlog</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	routers<span class="token punctuation">.</span><span class="token function">LoadShop</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token literal-property property">err</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;startup service failed, err:%v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由拆分到不同的 APP 有时候项目规模实在太大，那么我们就更倾向于把业务拆分的更详细一些，例如把不同的业务代码拆分成不同的 APP。</p><p>因此我们在项目目录下单独定义一个 app 目录，用来存放我们不同业务线的代码文件，这样就很容易进行横向扩展。大致目录结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>gin_demo
├── app
│   ├── blog
│   │   ├── handler<span class="token punctuation">.</span>go
│   │   └── router<span class="token punctuation">.</span>go
│   └── shop
│       ├── handler<span class="token punctuation">.</span>go
│       └── router<span class="token punctuation">.</span>go
├── go<span class="token punctuation">.</span>mod
├── go<span class="token punctuation">.</span>sum
├── main<span class="token punctuation">.</span>go
└── routers
    └── routers<span class="token punctuation">.</span>go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 app/blog/router.go 用来定义 blog 相关的路由信息，具体内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">Routers</span><span class="token punctuation">(</span><span class="token parameter">e <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">,</span> postHandler<span class="token punctuation">)</span>
	e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/comment&quot;</span><span class="token punctuation">,</span> commentHandler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app/shop/router.go 用来定义 shop 相关路由信息，具体内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">Routers</span><span class="token punctuation">(</span><span class="token parameter">e <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/goods&quot;</span><span class="token punctuation">,</span> goodsHandler<span class="token punctuation">)</span>
	e<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/checkout&quot;</span><span class="token punctuation">,</span> checkoutHandler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>routers/routers.go 中根据需要定义 Include 函数用来注册子 app 中定义的路由，Init 函数用来进行路由的初始化操作：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>type Option <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span>

<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Option<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 注册app的路由配置</span>
func <span class="token function">Include</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">...</span>Option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	options <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化</span>
func <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> _<span class="token punctuation">,</span> <span class="token literal-property property">opt</span> <span class="token operator">:</span><span class="token operator">=</span> range options <span class="token punctuation">{</span>
		<span class="token function">opt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.go 中按如下方式先注册子 app 中的路由，然后再进行路由的初始化：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>func <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 加载多个APP的路由配置</span>
	routers<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>shop<span class="token punctuation">.</span>Routers<span class="token punctuation">,</span> blog<span class="token punctuation">.</span>Routers<span class="token punctuation">)</span>
	<span class="token comment">// 初始化路由</span>
	<span class="token literal-property property">r</span> <span class="token operator">:</span><span class="token operator">=</span> routers<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token literal-property property">err</span> <span class="token operator">:</span><span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;startup service failed, err:%v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","gin.html.vue"]]),k=JSON.parse('{"path":"/backend/Golang/gin.html","title":"Gin","lang":"zh-CN","frontmatter":{"icon":"back-stage","title":"Gin","category":["后端"],"tag":["Golang"],"description":"路由拆分 当项目的规模增大后就不太适合继续在项目的 main.go 文件中去实现路由注册相关逻辑了，我们会倾向于把路由部分的代码都拆分出来，形成一个单独的文件或包： routers.go 此时 main.go 中调用上面定义好的setupRouter函数： 此时的目录结构： 把路由部分的代码单独拆分成包的话也是可以的，拆分后的目录结构如下： route...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/backend/Golang/gin.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"Gin"}],["meta",{"property":"og:description","content":"路由拆分 当项目的规模增大后就不太适合继续在项目的 main.go 文件中去实现路由注册相关逻辑了，我们会倾向于把路由部分的代码都拆分出来，形成一个单独的文件或包： routers.go 此时 main.go 中调用上面定义好的setupRouter函数： 此时的目录结构： 把路由部分的代码单独拆分成包的话也是可以的，拆分后的目录结构如下： route..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"Golang"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gin\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"路由拆分","slug":"路由拆分","link":"#路由拆分","children":[]},{"level":2,"title":"路由拆分成多个文件","slug":"路由拆分成多个文件","link":"#路由拆分成多个文件","children":[]}],"git":{"createdTime":1665988457000,"updatedTime":1680096943000,"contributors":[{"name":"FanGe","email":"653398363@qq.com","commits":1},{"name":"a653398363","email":"653398363@qq.com","commits":1}]},"readingTime":{"minutes":2.79,"words":838},"filePathRelative":"backend/Golang/gin.md","localizedDate":"2022年10月17日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
