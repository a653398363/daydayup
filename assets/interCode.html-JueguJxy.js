import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-R7pVbBlq.js";const p={},e=t(`<h1 id="code" tabindex="-1"><a class="header-anchor" href="#code"><span>Code</span></a></h1><ul><li>实现一个节流函数? 如果想要最后一次必须执行的话怎么实现?</li></ul><details><summary> 实现一个批量请求函数, 能够限制并发量? Promise控制并发请求个数 </summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiRequest</span><span class="token punctuation">(</span><span class="token parameter">urls<span class="token punctuation">,</span> maxNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> urls<span class="token punctuation">.</span>length <span class="token comment">// 请求总数量</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 请求结果数组</span>
  <span class="token keyword">let</span> sendCount <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 已发送的请求数量</span>
  <span class="token keyword">let</span> finishCount <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 已完成的请求数量</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先发送 maxNum 个请求，注意：请求数可能小于 maxNum，所以也要满足条件2</span>
    <span class="token comment">// 同步的 创建maxNum个next并行请求 然后才去执行异步的fetch 所以一上来就有5个next并行执行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>sendCount <span class="token operator">&lt;</span> maxNum <span class="token operator">&amp;&amp;</span> sendCount <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> current <span class="token operator">=</span> sendCount<span class="token operator">++</span> <span class="token comment">// 当前发送的请求数量，后加一 保存当前请求url的位置</span>
      <span class="token comment">// 递归出口</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>finishCount <span class="token operator">&gt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果所有请求完成，则解决掉 Promise，终止递归</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> url <span class="token operator">=</span> urls<span class="token punctuation">[</span>current<span class="token punctuation">]</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          finishCount<span class="token operator">++</span>
          res<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> result
          <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果请求没有发送完，继续发送请求</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          finishCount<span class="token operator">++</span>
          res<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> err
          <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果请求没有发送完，继续发送请求</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><summary></summary><details> BtnXXClick </details><h2 id="数组转树结构" tabindex="-1"><a class="header-anchor" href="#数组转树结构"><span>数组转树结构</span></a></h2><details><summary> 数组与树的转换 </summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门B&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门C&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门D&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门E&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门F&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门G&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;部门H&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment">// 添加多条数据</span>
<span class="token comment">// const rrr = new Array(300).fill().map((it, index) =&gt; {</span>
<span class="token comment">//   return {</span>
<span class="token comment">//     id: 9 + index,</span>
<span class="token comment">//     name: \`\${index}部门H\`,</span>
<span class="token comment">//     pid: 2,</span>
<span class="token comment">//   }</span>
<span class="token comment">// })</span>
<span class="token comment">// arr.push(...rrr)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>arr<span class="token operator">:</span> array 原数组数组<span class="token punctuation">,</span> id<span class="token operator">:</span> number 父节点id<span class="token punctuation">}</span></span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>children<span class="token operator">:</span> array 子数组<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>pid <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 找到当前id的子元素</span>
      <span class="token comment">// 插入子元素，每个子元素的children通过回调生成</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>item<span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">getChildren</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token comment">// 方法二</span>
<span class="token keyword">function</span> <span class="token function">toTree</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">it</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">[</span>it<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> it
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">it</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> cache<span class="token punctuation">[</span>it<span class="token punctuation">.</span>pid<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token keyword">else</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>树转数组</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
<span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 默认初始结果数组为[]</span>
  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 当前元素入栈</span>
  <span class="token comment">// 若元素包含children，则遍历children并递归调用使每一个子元素入栈</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">flat</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token comment">// 方法二</span>
<span class="token keyword">function</span> <span class="token function">toLine</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data <span class="token punctuation">}</span>
  <span class="token keyword">delete</span> parent<span class="token punctuation">.</span>children
  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">off</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ojb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ojb<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span>
      ojb<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ii</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ii<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> ii<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token function">off</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span>
        <span class="token keyword">delete</span> ii<span class="token punctuation">.</span>children
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">off</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>去除字符串中出现次数最少的字符，不改变原字符串的顺序。</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>“ababac” —— “ababa”
“aaabbbcceeff” —— “aaabbb”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><details><summary>写出一个函数transs，将数字转换成汉语的输出，输入为不超过10000亿的数字。</summary><ul><li><a href="https://gin-gonic.com/zh-cn/docs/" target="_blank" rel="noopener noreferrer">Gin 官方文档</a></li><li><a href="https://www.kancloud.cn/shuangdeyu/gin_book/949411" target="_blank" rel="noopener noreferrer">Gin 中文文档</a></li><li><a href="https://www.gin-vue-admin.com/" target="_blank" rel="noopener noreferrer">gin-vue-admin</a></li><li><a href="http://blog.itpub.net/31561269/viewspace-2637490/" target="_blank" rel="noopener noreferrer">轻量级 Web 框架 Gin 结构分析</a></li><li><a href="https://www.bookstack.cn/explore?cid=168" target="_blank" rel="noopener noreferrer">更多</a></li></ul></details>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","interCode.html.vue"]]),d=JSON.parse('{"path":"/interview/interCode.html","title":"Code","lang":"zh-CN","frontmatter":{"icon":"article","category":["JavaScript"],"tag":["Interview"],"description":"Code 实现一个节流函数? 如果想要最后一次必须执行的话怎么实现? 实现一个批量请求函数, 能够限制并发量? Promise控制并发请求个数 BtnXXClick 数组转树结构 数组与树的转换 树转数组 去除字符串中出现次数最少的字符，不改变原字符串的顺序。 写出一个函数transs，将数字转换成汉语的输出，输入为不超过10000亿的数字。 Gin ...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/interview/interCode.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"Code"}],["meta",{"property":"og:description","content":"Code 实现一个节流函数? 如果想要最后一次必须执行的话怎么实现? 实现一个批量请求函数, 能够限制并发量? Promise控制并发请求个数 BtnXXClick 数组转树结构 数组与树的转换 树转数组 去除字符串中出现次数最少的字符，不改变原字符串的顺序。 写出一个函数transs，将数字转换成汉语的输出，输入为不超过10000亿的数字。 Gin ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"Interview"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Code\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"数组转树结构","slug":"数组转树结构","link":"#数组转树结构","children":[]}],"git":{"createdTime":1670936960000,"updatedTime":1680096943000,"contributors":[{"name":"fange","email":"653398363@qq.com","commits":4},{"name":"FanGe","email":"653398363@qq.com","commits":2}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"interview/interCode.md","localizedDate":"2022年12月13日","excerpt":"","autoDesc":true}');export{k as comp,d as data};
