import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,a as e}from"./app-R7pVbBlq.js";const t={},p=e(`<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h1><p><a href="http://www.codebaoku.com/linux/linux-index.html" target="_blank" rel="noopener noreferrer">Linux Tutorial</a></p><h2 id="ps" tabindex="-1"><a class="header-anchor" href="#ps"><span>ps</span></a></h2><p>查找指定进程格式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep 进程关键字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询<code>node</code>进程</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>root@<span class="token constant">VM</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span><span class="token operator">-</span>centos <span class="token operator">~</span><span class="token punctuation">]</span># ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep node
root      <span class="token number">9122</span> <span class="token number">31385</span>  <span class="token number">0</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">49</span> pts<span class="token operator">/</span><span class="token number">0</span>    <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> grep <span class="token operator">--</span>color<span class="token operator">=</span>auto node
root     <span class="token number">28969</span>     <span class="token number">1</span>  <span class="token number">0</span> Apr11 <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">22</span> node index<span class="token punctuation">.</span>js

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭进程</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>kill <span class="token operator">-</span><span class="token number">9</span> 进程号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="后台运行" tabindex="-1"><a class="header-anchor" href="#后台运行"><span>后台运行</span></a></h2><p>为了使这些进程能够在后台运行，也就是说不在终端屏幕上运行，有几种选择方法可供使用</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>&amp;</span></a></h3><p>当在前台运行某个作业时，终端被该作业占据；可以在命令后面加上&amp; 实现后台运行。例如：<code>sh test.sh &amp;</code> 适合在后台运行的命令有 f i n d、费时的排序及一些 s h e l l 脚本。</p><p>在后台运行作业时要当心：需要用户交互的命令不要放在后台执行，因为这样你的机器就会在那里傻等。不过，作业在后台运行一样会将结果输出到屏幕上，干扰你的工作。如果放在后台运行的作业会产生大量的输出，最好使用下面的方法把它的输出重定向到某个文件中：</p><p>PS：当你成功地提交进程以后，就会显示出一个进程号，可以用它来监控该进程，或杀死它。(ps -ef | grep 进程号 或者 kill -9 进程号）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>command  <span class="token operator">&gt;</span>  out<span class="token punctuation">.</span>file  <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span>  <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，所有的标准输出和错误输出都将被重定向到一个叫做 out.file 的文件中。</p><h3 id="nohup" tabindex="-1"><a class="header-anchor" href="#nohup"><span>nohup</span></a></h3><p>使用&amp;命令后，作业被提交到后台运行，当前控制台没有被占用，但是一但把当前控制台关掉(退出帐户时)，作业就会停止运行。nohup 命令可以在你退出帐户之后继续运行相应的进程。nohup 就是不挂起的意思( no hang up)。该命令的一般形式为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>nohup command <span class="token operator">&amp;</span>

<span class="token comment">// example</span>
nohup node index<span class="token punctuation">.</span>js <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 nohup 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 nohup.out 的文件中，除非另外指定了输出文件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>nohup command <span class="token operator">&gt;&gt;</span> myout<span class="token punctuation">.</span>file <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用了<code>nohup</code>之后，很多人就这样不管了，其实这样有可能在当前账户非正常退出或者结束的时候，命令还是自己结束了。所以在使用<code>nohup</code>命令后台运行命令之后，需要使用<code>exit</code>正常退出当前账户，这样才能保证命令一直在后台运行</p><ol><li>ctrl + z<br> 可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</li><li>Ctrl + c<br> 终止前台命令。</li><li>jobs<br> 查看当前有多少在后台运行的命令。 <code>jobs -l</code> 选项可显示所有任务的 PID，<code>jobs</code> 的状态可以是 running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的 shell 环境已知的列表中删除任务的进程标识。</li></ol><p><a href="http://www.codebaoku.com/shell/shell-redirect.html" target="_blank" rel="noopener noreferrer">shell 输出重定向</a></p><ul><li><p><code>command &gt;&gt; out.file</code>是将 command 的输出重定向到 out.file 文件，即输出内容不打印到屏幕上，而是输出到 out.file 文件中。</p></li><li><p>标准输入文件(stdin)：stdin 的文件描述符为 0，Unix 程序默认从 stdin 读取数据。</p></li><li><p>标准输出文件(stdout)：stdout 的文件描述符为 1，Unix 程序默认向 stdout 输出数据。</p></li><li><p>标准错误文件(stderr)：stderr 的文件描述符为 2，Unix 程序会向 stderr 流中写入错误信息。</p></li><li><p>2&gt;&amp;1 是将标准出和错误输出合并，这里是重定向到了 out.file 文件，即将标准出错也输出到 out.file 文件中。最后一个&amp;， 是让该命令在后台执行。</p></li></ul><h2 id="传送文件" tabindex="-1"><a class="header-anchor" href="#传送文件"><span>传送文件</span></a></h2><h3 id="scp" tabindex="-1"><a class="header-anchor" href="#scp"><span>scp</span></a></h3><p>本地和服务器之间用 <a href="https://www.runoob.com/linux/linux-comm-scp.html" target="_blank" rel="noopener noreferrer"><code>scp</code></a> 命令 相互传送文件， <code>secure copy</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">usage</span><span class="token operator">:</span> scp <span class="token punctuation">[</span><span class="token operator">-</span>346BCpqrv<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>c cipher<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token constant">F</span> ssh_config<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>i identity_file<span class="token punctuation">]</span>
           <span class="token punctuation">[</span><span class="token operator">-</span>l limit<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>o ssh_option<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token constant">P</span> port<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token constant">S</span> program<span class="token punctuation">]</span> source <span class="token operator">...</span> target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>本地向服务器</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>scp local_file remote_username@remote_ip<span class="token operator">:</span>remote_folder
<span class="token comment">// 或者</span>
scp local_file remote_username@remote_ip<span class="token operator">:</span>remote_file
<span class="token comment">// 或者</span>
scp local_file remote_ip<span class="token operator">:</span>remote_folder
<span class="token comment">// 或者</span>
scp local_file remote_ip<span class="token operator">:</span>remote_file
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>从服务器获取</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>scp root@www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>root<span class="token operator">/</span>others<span class="token operator">/</span>music <span class="token operator">/</span>home<span class="token operator">/</span>space<span class="token operator">/</span>music<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">.</span>mp3
scp <span class="token operator">-</span>r www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token operator">/</span>home<span class="token operator">/</span>root<span class="token operator">/</span>others<span class="token operator">/</span> <span class="token operator">/</span>home<span class="token operator">/</span>space<span class="token operator">/</span>music<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xshell-软件里的-xftp-程序" tabindex="-1"><a class="header-anchor" href="#xshell-软件里的-xftp-程序"><span>xshell 软件里的 xftp 程序</span></a></h3><p><a href="https://www.xshell.com/zh/xshell/" target="_blank" rel="noopener noreferrer">xshell</a> 这个软件很好，强烈推荐哦！！！</p><p>里面有个 xftp 小插件，可以支持文件在笔记本和服务器互传，这个小插件需要单独在网上下载，直接百度搜 xftp，很方便。</p><h3 id="rcp" tabindex="-1"><a class="header-anchor" href="#rcp"><span>rcp</span></a></h3><p>目标主机需要事先打开 rcp 功能，并设置好 rcp 的权限：把源主机加入到可信任主机列表中，否则无法在源主机上使用 rcp 远程复制文件到目标主机</p><h3 id="wget" tabindex="-1"><a class="header-anchor" href="#wget"><span>wget</span></a></h3><p>wget [参数] ftp://&lt;目标机器 ip 或主机名&gt;/&lt;文件的绝对路径&gt; #proftpd 格式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>wget ftp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>remote_ip<span class="token comment">//home/work/source.txt  #从192.168.0.10上拷贝文件夹source.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="linux-设置开机启动" tabindex="-1"><a class="header-anchor" href="#linux-设置开机启动"><span>Linux 设置开机启动</span></a></h2><h3 id="添加命令" tabindex="-1"><a class="header-anchor" href="#添加命令"><span>添加命令</span></a></h3><p>编辑文件 <code>/etc/rc.local</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/rc.local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文件末尾加上你开机需要执行的命令即可（写绝对路径，添加到系统环境变量的除外），如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> /usr/local/srs2/objs/srs <span class="token parameter variable">-c</span> /usr/local/srs2/conf/z.conf<span class="token operator">&gt;</span>/usr/local/srs2/log.txt <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加-shell-脚本" tabindex="-1"><a class="header-anchor" href="#添加-shell-脚本"><span>添加 Shell 脚本</span></a></h3><p>将写好的脚本（.sh 文件）放到目录 /etc/profile.d/ 下，系统启动后就会自动执行该目录下的所有 shell 脚本。</p><h3 id="添加服务" tabindex="-1"><a class="header-anchor" href="#添加服务"><span>添加服务</span></a></h3><p>新建<code>/etc/init.d/demo.sh</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token comment"># chkconfig: 2345 85 15</span>
<span class="token comment"># description:auto_run</span>

<span class="token comment">#程序根位置</span>
<span class="token assign-left variable">MY_ROOT</span><span class="token operator">=</span>/usr/local/srs2/

<span class="token comment">#运行程序位置</span>
<span class="token assign-left variable">MY_PATH</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${MY_ROOT}</span>objs/srs&quot;</span>

<span class="token comment">#LOG位置</span>
<span class="token assign-left variable">LOG_PATH</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$MY_ROOT</span>&quot;</span>log.txt

<span class="token comment">#开始方法</span>
<span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin class-name">cd</span> <span class="token variable">$MY_ROOT</span>
    <span class="token function">nohup</span> <span class="token variable">$MY_PATH</span> <span class="token parameter variable">-c</span> conf/z.conf<span class="token operator">&gt;</span><span class="token variable">$LOG_PATH</span> <span class="token operator">&amp;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$MY_PATH</span> start success.&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">#结束方法</span>
<span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> $MY_PATH<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> stop<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">\`</span></span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$MY_PATH</span> stop success.&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">case</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token keyword">in</span>
start<span class="token punctuation">)</span>
    start
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
stop<span class="token punctuation">)</span>
    stop
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
restart<span class="token punctuation">)</span>
    stop
    start
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Userage: <span class="token variable">$0</span> {start|stop|restart}&quot;</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>添加执行权限给 sh 文件和 jar 可执行权限</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x /etc/init.d/srs.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><p>设置开机启动<br> 首先，添加为系统服务</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> srs.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开机自启动</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chkconfig</span> srs.sh on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chkconfig</span> <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">service</span> srs.sh start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">service</span> srs.sh stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看启动情况</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">lsof</span> <span class="token parameter variable">-i:1935</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,56),l=[p];function o(i,c){return a(),n("div",null,l)}const u=s(t,[["render",o],["__file","linux.html.vue"]]),m=JSON.parse('{"path":"/serve/linux/linux.html","title":"Linux","lang":"zh-CN","frontmatter":{"icon":"article","category":["Serve","Guide"],"tag":["linux","Quickly Start"],"description":"Linux Linux Tutorial ps 查找指定进程格式： 查询node进程 关闭进程 后台运行 为了使这些进程能够在后台运行，也就是说不在终端屏幕上运行，有几种选择方法可供使用 & 当在前台运行某个作业时，终端被该作业占据；可以在命令后面加上& 实现后台运行。例如：sh test.sh & 适合在后台运行的命令有 f i n d、费时的排序及...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/serve/linux/linux.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"Linux"}],["meta",{"property":"og:description","content":"Linux Linux Tutorial ps 查找指定进程格式： 查询node进程 关闭进程 后台运行 为了使这些进程能够在后台运行，也就是说不在终端屏幕上运行，有几种选择方法可供使用 & 当在前台运行某个作业时，终端被该作业占据；可以在命令后面加上& 实现后台运行。例如：sh test.sh & 适合在后台运行的命令有 f i n d、费时的排序及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-22T10:34:53.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"Quickly Start"}],["meta",{"property":"article:modified_time","content":"2023-09-22T10:34:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-22T10:34:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"ps","slug":"ps","link":"#ps","children":[]},{"level":2,"title":"后台运行","slug":"后台运行","link":"#后台运行","children":[{"level":3,"title":"&","slug":"","link":"#","children":[]},{"level":3,"title":"nohup","slug":"nohup","link":"#nohup","children":[]}]},{"level":2,"title":"传送文件","slug":"传送文件","link":"#传送文件","children":[{"level":3,"title":"scp","slug":"scp","link":"#scp","children":[]},{"level":3,"title":"xshell 软件里的 xftp 程序","slug":"xshell-软件里的-xftp-程序","link":"#xshell-软件里的-xftp-程序","children":[]},{"level":3,"title":"rcp","slug":"rcp","link":"#rcp","children":[]},{"level":3,"title":"wget","slug":"wget","link":"#wget","children":[]}]},{"level":2,"title":"Linux 设置开机启动","slug":"linux-设置开机启动","link":"#linux-设置开机启动","children":[{"level":3,"title":"添加命令","slug":"添加命令","link":"#添加命令","children":[]},{"level":3,"title":"添加 Shell 脚本","slug":"添加-shell-脚本","link":"#添加-shell-脚本","children":[]},{"level":3,"title":"添加服务","slug":"添加服务","link":"#添加服务","children":[]}]}],"git":{"createdTime":1665407830000,"updatedTime":1695378893000,"contributors":[{"name":"lfange","email":"653398363@qq.com","commits":1}]},"readingTime":{"minutes":4.94,"words":1481},"filePathRelative":"serve/linux/linux.md","localizedDate":"2022年10月10日","excerpt":"","autoDesc":true}');export{u as comp,m as data};
