import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-R7pVbBlq.js";const e={},p=t(`<h1 id="vue组件" tabindex="-1"><a class="header-anchor" href="#vue组件"><span>Vue组件</span></a></h1><h2 id="vue父子组件的生命周期顺序" tabindex="-1"><a class="header-anchor" href="#vue父子组件的生命周期顺序"><span>vue父子组件的生命周期顺序</span></a></h2><h3 id="加载渲染过程" tabindex="-1"><a class="header-anchor" href="#加载渲染过程"><span>加载渲染过程</span></a></h3><div class="language-repl line-numbers-mode" data-ext="repl" data-title="repl"><pre class="language-repl"><code>父beforeCreate -&gt; 父created-&gt; 父beforeMount-&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>父组件会先执行到beforeMount，接着会执行子组件钩子到挂载结束，再挂载父组件。</p><h3 id="子组件更新过程" tabindex="-1"><a class="header-anchor" href="#子组件更新过程"><span>子组件更新过程</span></a></h3><div class="language-repl line-numbers-mode" data-ext="repl" data-title="repl"><pre class="language-repl"><code>父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="父组件更新过程" tabindex="-1"><a class="header-anchor" href="#父组件更新过程"><span>父组件更新过程</span></a></h3><div class="language-repl line-numbers-mode" data-ext="repl" data-title="repl"><pre class="language-repl"><code>父beforeUpdate -&gt; 父updated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="销毁过程" tabindex="-1"><a class="header-anchor" href="#销毁过程"><span>销毁过程</span></a></h3><div class="language-repl line-numbers-mode" data-ext="repl" data-title="repl"><pre class="language-repl"><code>父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="解析-dom-模板时的注意事项" tabindex="-1"><a class="header-anchor" href="#解析-dom-模板时的注意事项"><span>解析 DOM 模板时的注意事项</span></a></h2><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>row</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>row</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>row</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>row</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>row</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>row</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;row&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>row</code> 组件在渲染页面时，并不会把<code>tr</code>节点渲染到<code>tbody</code>里面，而是被提升到了和<code>table</code>同一个级别的地方。原因是在html编码规范中，<code>tbody</code>里面只能放<code>tr</code>，正确的做法是使用<code>tr</code>标签添加<code>is</code>属性等于组件名称<code>row</code> :</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，<code>ul&gt;li</code>、<code>ol&gt;li</code>、<code>select &gt; option</code> 标签也要注意这样的问题。</p><p>需要注意的是<strong>如果我们从以下来源使用模板的话，这条限制是不存在的</strong>：</p><ul><li>字符串 (例如：<code>template: &#39;...&#39;</code>)</li><li><a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener noreferrer">单文件组件 (<code>.vue</code>)</a></li><li><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#X-Templates" target="_blank" rel="noopener noreferrer"><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></a></li></ul><h2 id="子组件内的data要使用函数返回" tabindex="-1"><a class="header-anchor" href="#子组件内的data要使用函数返回"><span>子组件内的data要使用函数返回</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;row&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;this is content&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;tr&gt;&lt;td&gt;{{content}}&lt;/td&gt;&lt;/tr&gt;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之所以这样设计是因为子组件有可能会被调用多次，而每次调用时的data数据都应该是独立的。因此需要通过一个函数来实现，每个实例可以维护一份被返回对象的独立的拷贝。</p><p>这样才不会出现每个子组件数据相互影响的情况。</p><h2 id="通过-ref-引用操作dom" tabindex="-1"><a class="header-anchor" href="#通过-ref-引用操作dom"><span>通过 ref 引用操作DOM</span></a></h2><p><a href="https://cn.vuejs.org/v2/api/#ref" target="_blank" rel="noopener noreferrer">ref</a></p><p>虽然并不推荐我们在使用vue的时候操作DOM，但是某些情况下我们必须要操作DOM来实现一些功能，因此可以通过ref引用的形式来获取到DOM节点。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- \`vm.$refs.p\` 指向DOM元素节点 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- \`vm.$refs.child\` 指向组件实例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向<strong>组件实例</strong>。</p>`,27),o=[p];function l(c,i){return a(),s("div",null,o)}const d=n(e,[["render",l],["__file","usage.html.vue"]]),k=JSON.parse('{"path":"/Front/Vue/componet/usage.html","title":"Vue组件","lang":"zh-CN","frontmatter":{"description":"Vue组件 vue父子组件的生命周期顺序 加载渲染过程 父组件会先执行到beforeMount，接着会执行子组件钩子到挂载结束，再挂载父组件。 子组件更新过程 父组件更新过程 销毁过程 解析 DOM 模板时的注意事项 上面代码中，row 组件在渲染页面时，并不会把tr节点渲染到tbody里面，而是被提升到了和table同一个级别的地方。原因是在html...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/Vue/componet/usage.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"Vue组件"}],["meta",{"property":"og:description","content":"Vue组件 vue父子组件的生命周期顺序 加载渲染过程 父组件会先执行到beforeMount，接着会执行子组件钩子到挂载结束，再挂载父组件。 子组件更新过程 父组件更新过程 销毁过程 解析 DOM 模板时的注意事项 上面代码中，row 组件在渲染页面时，并不会把tr节点渲染到tbody里面，而是被提升到了和table同一个级别的地方。原因是在html..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-24T12:11:57.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:modified_time","content":"2022-08-24T12:11:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-24T12:11:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"vue父子组件的生命周期顺序","slug":"vue父子组件的生命周期顺序","link":"#vue父子组件的生命周期顺序","children":[{"level":3,"title":"加载渲染过程","slug":"加载渲染过程","link":"#加载渲染过程","children":[]},{"level":3,"title":"子组件更新过程","slug":"子组件更新过程","link":"#子组件更新过程","children":[]},{"level":3,"title":"父组件更新过程","slug":"父组件更新过程","link":"#父组件更新过程","children":[]},{"level":3,"title":"销毁过程","slug":"销毁过程","link":"#销毁过程","children":[]}]},{"level":2,"title":"解析 DOM 模板时的注意事项","slug":"解析-dom-模板时的注意事项","link":"#解析-dom-模板时的注意事项","children":[]},{"level":2,"title":"子组件内的data要使用函数返回","slug":"子组件内的data要使用函数返回","link":"#子组件内的data要使用函数返回","children":[]},{"level":2,"title":"通过 ref 引用操作DOM","slug":"通过-ref-引用操作dom","link":"#通过-ref-引用操作dom","children":[]}],"git":{"createdTime":1660473339000,"updatedTime":1661343117000,"contributors":[{"name":"FanGe","email":"653398363@qq.com","commits":2}]},"readingTime":{"minutes":2.09,"words":626},"filePathRelative":"Front/Vue/componet/usage.md","localizedDate":"2022年8月14日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
