import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-R7pVbBlq.js";const e={},p=t(`<h1 id="window-print-打印" tabindex="-1"><a class="header-anchor" href="#window-print-打印"><span>window.print 打印</span></a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/print" target="_blank" rel="noopener noreferrer">MDN</a></p><p><strong>print() 方法用于打印当前窗口的内容</strong>。调用 print() 方法会产生一个打印预览弹框，让用户可以设置打印请求。最简单的打印就是直接调用 window.print()，当然用 document.execCommand(&#39;print&#39;) 也可以达到同样的效果。默认打印页面中 body 里的所有内容。</p><h2 id="打印样式" tabindex="-1"><a class="header-anchor" href="#打印样式"><span>打印样式</span></a></h2><p>直接调用 print()方法去打印网页内容，我们会发现，事先调整好的布局和样式都没法实现，那么有哪些方法可以帮助我们改善打印的用户体验呢？</p><h3 id="使用打印样式表" tabindex="-1"><a class="header-anchor" href="#使用打印样式表"><span>使用打印样式表</span></a></h3><p>配置一份打印样式表 print.css，引入到 HTML 文档，在 <link> 上加上一个 media=&quot;print&quot; 来标识这是打印机才会应用的样式表，这样打印的时候，就会默认将该样式表应用到文档中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">&quot;/path/print.css&quot;</span> media<span class="token operator">=</span><span class="token string">&quot;print&quot;</span> rel<span class="token operator">=</span><span class="token string">&quot;stylesheet&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用媒介查询" tabindex="-1"><a class="header-anchor" href="#使用媒介查询"><span>使用媒介查询</span></a></h3><p>当我们要修改的样式没有很多的时候，其实完全不需要重新写个样式表，只要写上一个媒介查询也可以达到同样的效果，如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>@media print <span class="token punctuation">{</span>
  h1 <span class="token punctuation">{</span>
    font<span class="token operator">-</span>size<span class="token operator">:</span> 20px<span class="token punctuation">;</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内联样式使用-media-属性" tabindex="-1"><a class="header-anchor" href="#内联样式使用-media-属性"><span>内联样式使用 media 属性</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">&quot;text/css&quot;</span> media<span class="token operator">=</span><span class="token string">&quot;print&quot;</span><span class="token operator">&gt;</span>
  <span class="token comment">// 打印样式</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-css-中使用-import-引入打印样式表" tabindex="-1"><a class="header-anchor" href="#在-css-中使用-import-引入打印样式表"><span>在 css 中使用@import 引入打印样式表</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>@<span class="token keyword">import</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;/path/print.css&quot;</span><span class="token punctuation">)</span> print<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="打印指定区域" tabindex="-1"><a class="header-anchor" href="#打印指定区域"><span>打印指定区域</span></a></h2><h3 id="startprint-endprint" tabindex="-1"><a class="header-anchor" href="#startprint-endprint"><span>startprint endprint</span></a></h3><p>在需要打印的正文内容所对应的 html 开始处加上 标识，结尾处加上 标识，截取打印标识之间的内容替换 body 的内容，调用打印 print()方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;打印此页面&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;printpage()&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>startprint<span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;printContent&quot;</span><span class="token operator">&gt;</span>打印内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>endprint<span class="token operator">--</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">function</span> <span class="token function">printpage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> oldStr <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span> <span class="token comment">// 获取body的内容</span>
      <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token string">&quot;&lt;!--startprint--&gt;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 开始打印标识, 17个字符</span>
      <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token string">&quot;&lt;!--endprint--&gt;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 结束打印标识</span>
      <span class="token keyword">let</span> newStr <span class="token operator">=</span> oldStr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取开始打印标识之后的内容</span>
      newStr <span class="token operator">=</span> newStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> newStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取开始打印标识和结束打印标识之间的内容</span>
      window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newStr<span class="token punctuation">;</span> <span class="token comment">// 把需要打印的指定内容赋给body</span>
      window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用浏览器的打印功能打印指定区域</span>
      window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> oldStr<span class="token punctuation">;</span> <span class="token comment">// body替换为原来的内容</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新窗口打印内容" tabindex="-1"><a class="header-anchor" href="#新窗口打印内容"><span>新窗口打印内容</span></a></h3><p>新开一个窗口用来打印所需要的内容，更易扩展，如需添加一些当前文档内容没有的数据，可以直接通过 dom 操作，添加，然后渲染到新的窗口用来打印</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> printWindow <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;打印&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;。。。&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 打印样式设置</span>
<span class="token keyword">const</span> style <span class="token operator">=</span>
  <span class="token string">&#39;&lt;style&gt;*{margin:0px;}@media print {@page {margin: 0;}body {margin: 1cm;}}&lt;/style&gt;&#39;</span>

<span class="token comment">// 获取需要打印的内容</span>
<span class="token keyword">let</span> printHtml <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;contentMB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML

<span class="token comment">// 需要额外打印的内容， 这里加个标题</span>
printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
      &lt;h3 style=&quot;text-align:center&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3&gt;
      &lt;div style=&quot;position:relative;&quot; class=&quot;contain&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.contain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> printHtml <span class="token operator">+</span> style

<span class="token comment">// 删除一些dom</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">regId</span><span class="token punctuation">(</span>printHtml<span class="token punctuation">)</span>
  <span class="token keyword">const</span> parent <span class="token operator">=</span> printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#xxx&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> checkbox <span class="token operator">=</span> printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#xxx&#39;</span><span class="token punctuation">)</span>
  parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>checkbox<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;print is wrong&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>printWindow<span class="token punctuation">.</span>ActiveXObject <span class="token operator">||</span> <span class="token string">&#39;ActiveXObject&#39;</span> <span class="token keyword">in</span> printWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//是否ie</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove_ie_header_and_footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
printWindow<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//关闭document的输出流, 显示选定的数据</span>
printWindow<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iframe" tabindex="-1"><a class="header-anchor" href="#iframe"><span>iframe</span></a></h3><p>可以将需要打印的内容在<code>iframe</code>内渲染，然后直接调用 iframe 的打印方法打印</p><h2 id="强制插入分页" tabindex="-1"><a class="header-anchor" href="#强制插入分页"><span>强制插入分页</span></a></h2><h3 id="page-break-before-指定元素前添加分页符" tabindex="-1"><a class="header-anchor" href="#page-break-before-指定元素前添加分页符"><span>page-break-before（指定元素前添加分页符）</span></a></h3><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>auto</td><td>默认值。如果必要则在元素前插入分页符。</td></tr><tr><td>always</td><td>在元素前插入分页符。</td></tr><tr><td>avoid</td><td>避免在元素前插入分页符。</td></tr><tr><td>left</td><td>在元素之前足够的分页符，一直到一张空白的左页为止。</td></tr><tr><td>right</td><td>在元素之前足够的分页符，一直到一张空白的右页为止。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 page-break-before 属性的设置。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 在h1元素前始终插入分页符 */</span>
@media print <span class="token punctuation">{</span>
    h1 <span class="token punctuation">{</span>page<span class="token operator">-</span><span class="token keyword">break</span><span class="token operator">-</span>before<span class="token operator">:</span> always<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="page-break-after-指定元素后添加分页符" tabindex="-1"><a class="header-anchor" href="#page-break-after-指定元素后添加分页符"><span>page-break-after （指定元素后添加分页符）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 在 .footer 元素后始终插入分页符 */</span>
@media print <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>footer <span class="token punctuation">{</span>page<span class="token operator">-</span><span class="token keyword">break</span><span class="token operator">-</span>after<span class="token operator">:</span> always<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="page-break-inside-用于设置是否在指定元素中插入分页符" tabindex="-1"><a class="header-anchor" href="#page-break-inside-用于设置是否在指定元素中插入分页符"><span>page-break-inside（用于设置是否在指定元素中插入分页符）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 避免在 &lt;pre&gt; 与 &lt;blockquote&gt; 元素中插入分页符 */</span>
@media print <span class="token punctuation">{</span>
    pre<span class="token punctuation">,</span> blockquote <span class="token punctuation">{</span>page<span class="token operator">-</span><span class="token keyword">break</span><span class="token operator">-</span>inside<span class="token operator">:</span> avoid<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>不能对绝对定位的元素使用以上三种分页属性。</li><li>请尽可能少地使用分页属性，并且避免在表格、浮动元素、带有边框的块元素中使用分页属性。</li></ol><h2 id="设置打印布局-横向、纵向、边距" tabindex="-1"><a class="header-anchor" href="#设置打印布局-横向、纵向、边距"><span>设置打印布局（横向、纵向、边距）</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>@media print <span class="token punctuation">{</span>
    @page <span class="token punctuation">{</span>
      <span class="token comment">/* 纵向 */</span>
      <span class="token literal-property property">size</span><span class="token operator">:</span> portrait<span class="token punctuation">;</span>

      <span class="token comment">/* 横向 */</span>
      <span class="token literal-property property">size</span><span class="token operator">:</span> landscape<span class="token punctuation">;</span>

      <span class="token comment">/* 边距 上右下左 */</span>
      <span class="token literal-property property">margin</span><span class="token operator">:</span> 1cm 2cm 1cm 2cm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="去除浏览器默认页眉页脚" tabindex="-1"><a class="header-anchor" href="#去除浏览器默认页眉页脚"><span>去除浏览器默认页眉页脚</span></a></h2><p>页眉打印默认有页眉页脚信息，展现到页面外边距范围，我们可以通过去除页面模型 page 的外边距，使得内容不会延伸到页面的边缘，再通过设置 body 元素的 margin 来保证 A4 纸打印出来的页面带有外边距</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>@media print <span class="token punctuation">{</span>
  @page <span class="token punctuation">{</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  body <span class="token punctuation">{</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span> 1cm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打印方法封装" tabindex="-1"><a class="header-anchor" href="#打印方法封装"><span>打印方法封装</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">printHtml</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token function">getContainer</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>

  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>

  <span class="token function">getLoadPromise</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置打印样式</span>
<span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> styleContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#print-container {
        display: none;
    }
    @media print {
        body &gt; :not(.print-container) {
            display: none;
        }
        html,
        body {
            display: block !important;
        }
        #print-container {
            display: block;
        }
    }</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">let</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span>
  style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> styleContent
  <span class="token keyword">return</span> style
<span class="token punctuation">}</span>

<span class="token comment">// 清空打印内容</span>
<span class="token keyword">function</span> <span class="token function">cleanPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;print-container&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>div<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 新建DOM，将需要打印的内容填充到DOM</span>
<span class="token keyword">function</span> <span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">cleanPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  container<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;print-container&#39;</span><span class="token punctuation">)</span>
  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html
  <span class="token keyword">return</span> container
<span class="token punctuation">}</span>

<span class="token comment">// 图片完全加载后再调用打印方法</span>
<span class="token keyword">function</span> <span class="token function">getLoadPromise</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> imgs <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span>
  imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> finishedCount <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      finishedCount<span class="token operator">++</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedCount <span class="token operator">===</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      img<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> check<span class="token punctuation">)</span>
      img<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> check<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接调用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> printHtml <span class="token keyword">from</span> <span class="token string">&#39;@/utils/print.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> printData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;打印内容&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token function">printHtml</span><span class="token punctuation">(</span>printData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","print.html.vue"]]),k=JSON.parse(`{"path":"/Front/JavaScript/print.html","title":"window.print 打印","lang":"zh-CN","frontmatter":{"icon":"article","category":["JavaScript"],"tag":["Interview"],"description":"window.print 打印 MDN print() 方法用于打印当前窗口的内容。调用 print() 方法会产生一个打印预览弹框，让用户可以设置打印请求。最简单的打印就是直接调用 window.print()，当然用 document.execCommand('print') 也可以达到同样的效果。默认打印页面中 body 里的所有内容。 打印样式...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/JavaScript/print.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"window.print 打印"}],["meta",{"property":"og:description","content":"window.print 打印 MDN print() 方法用于打印当前窗口的内容。调用 print() 方法会产生一个打印预览弹框，让用户可以设置打印请求。最简单的打印就是直接调用 window.print()，当然用 document.execCommand('print') 也可以达到同样的效果。默认打印页面中 body 里的所有内容。 打印样式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"Interview"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"window.print 打印\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"打印样式","slug":"打印样式","link":"#打印样式","children":[{"level":3,"title":"使用打印样式表","slug":"使用打印样式表","link":"#使用打印样式表","children":[]},{"level":3,"title":"使用媒介查询","slug":"使用媒介查询","link":"#使用媒介查询","children":[]},{"level":3,"title":"内联样式使用 media 属性","slug":"内联样式使用-media-属性","link":"#内联样式使用-media-属性","children":[]},{"level":3,"title":"在 css 中使用@import 引入打印样式表","slug":"在-css-中使用-import-引入打印样式表","link":"#在-css-中使用-import-引入打印样式表","children":[]}]},{"level":2,"title":"打印指定区域","slug":"打印指定区域","link":"#打印指定区域","children":[{"level":3,"title":"startprint endprint","slug":"startprint-endprint","link":"#startprint-endprint","children":[]},{"level":3,"title":"新窗口打印内容","slug":"新窗口打印内容","link":"#新窗口打印内容","children":[]},{"level":3,"title":"iframe","slug":"iframe","link":"#iframe","children":[]}]},{"level":2,"title":"强制插入分页","slug":"强制插入分页","link":"#强制插入分页","children":[{"level":3,"title":"page-break-before（指定元素前添加分页符）","slug":"page-break-before-指定元素前添加分页符","link":"#page-break-before-指定元素前添加分页符","children":[]},{"level":3,"title":"page-break-after （指定元素后添加分页符）","slug":"page-break-after-指定元素后添加分页符","link":"#page-break-after-指定元素后添加分页符","children":[]},{"level":3,"title":"page-break-inside（用于设置是否在指定元素中插入分页符）","slug":"page-break-inside-用于设置是否在指定元素中插入分页符","link":"#page-break-inside-用于设置是否在指定元素中插入分页符","children":[]}]},{"level":2,"title":"设置打印布局（横向、纵向、边距）","slug":"设置打印布局-横向、纵向、边距","link":"#设置打印布局-横向、纵向、边距","children":[]},{"level":2,"title":"去除浏览器默认页眉页脚","slug":"去除浏览器默认页眉页脚","link":"#去除浏览器默认页眉页脚","children":[]},{"level":2,"title":"打印方法封装","slug":"打印方法封装","link":"#打印方法封装","children":[]}],"git":{"createdTime":1666431357000,"updatedTime":1680096943000,"contributors":[{"name":"FanGe","email":"653398363@qq.com","commits":1},{"name":"a653398363","email":"653398363@qq.com","commits":1}]},"readingTime":{"minutes":4.75,"words":1425},"filePathRelative":"Front/JavaScript/print.md","localizedDate":"2022年10月22日","excerpt":"","autoDesc":true}`);export{d as comp,k as data};
