import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as t}from"./app-R7pVbBlq.js";const s="/assets/b396d726-b75f-4a32-89a2-03a7b6e19f6f-uempmD3q.jpg",i="/assets/47d98583-8bb0-45cc-812d-47eefa0a4a40-ynCDrP2E.jpg",l="/assets/76dc7769-1aac-4888-9bea-064f1caa8e77-4f72R9NQ.jpg",o={},c=t(`<h1 id="计算机操作系统-链接" tabindex="-1"><a class="header-anchor" href="#计算机操作系统-链接"><span>计算机操作系统 - 链接</span></a></h1><h2 id="编译系统" tabindex="-1"><a class="header-anchor" href="#编译系统"><span>编译系统</span></a></h2><p>以下是一个 hello.c 程序：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Unix 系统上，由编译器把源文件转换为目标文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">-o</span> hello hello.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个过程大致如下：</p><div align="center"><img src="`+s+'" width="800"></div><br><ul><li>预处理阶段：处理以 # 开头的预处理命令；</li><li>编译阶段：翻译成汇编文件；</li><li>汇编阶段：将汇编文件翻译成可重定位目标文件；</li><li>链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件。</li></ul><h2 id="静态链接" tabindex="-1"><a class="header-anchor" href="#静态链接"><span>静态链接</span></a></h2><p>静态链接器以一组可重定位目标文件为输入，生成一个完全链接的可执行目标文件作为输出。链接器主要完成以下两个任务：</p><ul><li>符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来。</li><li>重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置。</li></ul><div align="center"><img src="'+i+'"></div><br><h2 id="目标文件" tabindex="-1"><a class="header-anchor" href="#目标文件"><span>目标文件</span></a></h2><ul><li>可执行目标文件：可以直接在内存中执行；</li><li>可重定位目标文件：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件；</li><li>共享目标文件：这是一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接；</li></ul><h2 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接"><span>动态链接</span></a></h2><p>静态库有以下两个问题：</p><ul><li>当静态库更新时那么整个程序都要重新进行链接；</li><li>对于 printf 这种标准函数库，如果每个程序都要有代码，这会极大浪费资源。</li></ul><p>共享库是为了解决静态库的这两个问题而设计的，在 Linux 系统中通常用 .so 后缀来表示，Windows 系统上它们被称为 DLL。它具有以下特点：</p><ul><li>在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中；</li><li>在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享。</li></ul><div align="center"><img src="'+l+'"></div><br>',24),r=[c];function p(d,u){return n(),a("div",null,r)}const g=e(o,[["render",p],["__file","link.html.vue"]]),v=JSON.parse('{"path":"/computer/os/link.html","title":"计算机操作系统 - 链接","lang":"zh-CN","frontmatter":{"description":"计算机操作系统 - 链接 编译系统 以下是一个 hello.c 程序： 在 Unix 系统上，由编译器把源文件转换为目标文件。 这个过程大致如下： 预处理阶段：处理以 # 开头的预处理命令； 编译阶段：翻译成汇编文件； 汇编阶段：将汇编文件翻译成可重定位目标文件； 链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/computer/os/link.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"计算机操作系统 - 链接"}],["meta",{"property":"og:description","content":"计算机操作系统 - 链接 编译系统 以下是一个 hello.c 程序： 在 Unix 系统上，由编译器把源文件转换为目标文件。 这个过程大致如下： 预处理阶段：处理以 # 开头的预处理命令； 编译阶段：翻译成汇编文件； 汇编阶段：将汇编文件翻译成可重定位目标文件； 链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T06:00:56.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:modified_time","content":"2023-09-21T06:00:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机操作系统 - 链接\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-21T06:00:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"编译系统","slug":"编译系统","link":"#编译系统","children":[]},{"level":2,"title":"静态链接","slug":"静态链接","link":"#静态链接","children":[]},{"level":2,"title":"目标文件","slug":"目标文件","link":"#目标文件","children":[]},{"level":2,"title":"动态链接","slug":"动态链接","link":"#动态链接","children":[]}],"git":{"createdTime":1695275289000,"updatedTime":1695276056000,"contributors":[{"name":"lfange","email":"653398363@qq.com","commits":3}]},"readingTime":{"minutes":2.23,"words":669},"filePathRelative":"computer/os/link.md","localizedDate":"2023年9月21日","excerpt":"","autoDesc":true}');export{g as comp,v as data};
