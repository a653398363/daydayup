import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as l,a as i}from"./app-R7pVbBlq.js";const t="/assets/c037c901-7eae-4e31-a1e4-9d41329e5c3e-Bj8gAg6a.png",n="/assets/b1fa0453-a4b0-4eae-a352-48acca8fff74-BXL7vACn.png",s="/assets/e1eda3d5-5ec8-4708-8e25-1a04c5e11f48-D8wNvMz7.png",r="/assets/ed523051-608f-4c3f-b343-383e2d194470-CMaNk7wx.png",p="/assets/d160ec2e-cfe2-4640-bda7-62f53e58b8c0-BXtyFdoL.png",c="/assets/62e0dd4f-44c3-43ee-bb6e-fedb9e068519-Ceq1lvZS.png",h={},d=i('<h1 id="计算机操作系统-死锁" tabindex="-1"><a class="header-anchor" href="#计算机操作系统-死锁"><span>计算机操作系统 - 死锁</span></a></h1><h2 id="必要条件" tabindex="-1"><a class="header-anchor" href="#必要条件"><span>必要条件</span></a></h2><div align="center"><img src="'+t+'"></div><br><ul><li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的。</li><li>占有和等待：已经得到了某个资源的进程可以再请求新的资源。</li><li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。</li><li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li></ul><h2 id="处理方法" tabindex="-1"><a class="header-anchor" href="#处理方法"><span>处理方法</span></a></h2><p>主要有以下四种方法：</p><ul><li>鸵鸟策略</li><li>死锁检测与死锁恢复</li><li>死锁预防</li><li>死锁避免</li></ul><h2 id="鸵鸟策略" tabindex="-1"><a class="header-anchor" href="#鸵鸟策略"><span>鸵鸟策略</span></a></h2><p>把头埋在沙子里，假装根本没发生问题。</p><p>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。</p><p>当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p><p>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p><h2 id="死锁检测与死锁恢复" tabindex="-1"><a class="header-anchor" href="#死锁检测与死锁恢复"><span>死锁检测与死锁恢复</span></a></h2><p>不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</p><h3 id="_1-每种类型一个资源的死锁检测" tabindex="-1"><a class="header-anchor" href="#_1-每种类型一个资源的死锁检测"><span>1. 每种类型一个资源的死锁检测</span></a></h3><div align="center"><img src="'+n+'"></div><br><p>上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。</p><p>图 a 可以抽取出环，如图 b，它满足了环路等待条件，因此会发生死锁。</p><p>每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。</p><h3 id="_2-每种类型多个资源的死锁检测" tabindex="-1"><a class="header-anchor" href="#_2-每种类型多个资源的死锁检测"><span>2. 每种类型多个资源的死锁检测</span></a></h3><div align="center"><img src="'+s+'"></div><br><p>上图中，有三个进程四个资源，每个数据代表的含义如下：</p><ul><li>E 向量：资源总量</li><li>A 向量：资源剩余量</li><li>C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量</li><li>R 矩阵：每个进程请求的资源数量</li></ul><p>进程 P<sub>1</sub> 和 P<sub>2</sub> 所请求的资源都得不到满足，只有进程 P<sub>3</sub> 可以，让 P<sub>3</sub> 执行，之后释放 P<sub>3</sub> 拥有的资源，此时 A = (2 2 2 0)。P<sub>2</sub> 可以执行，执行后释放 P<sub>2</sub> 拥有的资源，A = (4 2 2 1) 。P<sub>1</sub> 也可以执行。所有进程都可以顺利执行，没有死锁。</p><p>算法总结如下：</p><p>每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。</p><ol><li>寻找一个没有标记的进程 P<sub>i</sub>，它所请求的资源小于等于 A。</li><li>如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。</li><li>如果没有这样一个进程，算法终止。</li></ol><h3 id="_3-死锁恢复" tabindex="-1"><a class="header-anchor" href="#_3-死锁恢复"><span>3. 死锁恢复</span></a></h3><ul><li>利用抢占恢复</li><li>利用回滚恢复</li><li>通过杀死进程恢复</li></ul><h2 id="死锁预防" tabindex="-1"><a class="header-anchor" href="#死锁预防"><span>死锁预防</span></a></h2><p>在程序运行之前预防发生死锁。</p><h3 id="_1-破坏互斥条件" tabindex="-1"><a class="header-anchor" href="#_1-破坏互斥条件"><span>1. 破坏互斥条件</span></a></h3><p>例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</p><h3 id="_2-破坏占有和等待条件" tabindex="-1"><a class="header-anchor" href="#_2-破坏占有和等待条件"><span>2. 破坏占有和等待条件</span></a></h3><p>一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。</p><h3 id="_3-破坏不可抢占条件" tabindex="-1"><a class="header-anchor" href="#_3-破坏不可抢占条件"><span>3. 破坏不可抢占条件</span></a></h3><h3 id="_4-破坏环路等待" tabindex="-1"><a class="header-anchor" href="#_4-破坏环路等待"><span>4. 破坏环路等待</span></a></h3><p>给资源统一编号，进程只能按编号顺序来请求资源。</p><h2 id="死锁避免" tabindex="-1"><a class="header-anchor" href="#死锁避免"><span>死锁避免</span></a></h2><p>在程序运行时避免发生死锁。</p><h3 id="_1-安全状态" tabindex="-1"><a class="header-anchor" href="#_1-安全状态"><span>1. 安全状态</span></a></h3><div align="center"><img src="'+r+'"></div><br><p>图 a 的第二列 Has 表示已拥有的资源数，第三列 Max 表示总共需要的资源数，Free 表示还有可以使用的资源数。从图 a 开始出发，先让 B 拥有所需的所有资源（图 b），运行结束后释放 B，此时 Free 变为 5（图 c）；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态时安全的。</p><p>定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。</p><p>安全状态的检测与死锁的检测类似，因为安全状态必须要求不能发生死锁。下面的银行家算法与死锁检测算法非常类似，可以结合着做参考对比。</p><h3 id="_2-单个资源的银行家算法" tabindex="-1"><a class="header-anchor" href="#_2-单个资源的银行家算法"><span>2. 单个资源的银行家算法</span></a></h3><p>一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。</p><div align="center"><img src="'+p+'"></div><br><p>上图 c 为不安全状态，因此算法会拒绝之前的请求，从而避免进入图 c 中的状态。</p><h3 id="_3-多个资源的银行家算法" tabindex="-1"><a class="header-anchor" href="#_3-多个资源的银行家算法"><span>3. 多个资源的银行家算法</span></a></h3><div align="center"><img src="'+c+'"></div><br><p>上图中有五个进程，四个资源。左边的图表示已经分配的资源，右边的图表示还需要分配的资源。最右边的 E、P 以及 A 分别表示：总资源、已分配资源以及可用资源，注意这三个为向量，而不是具体数值，例如 A=(1020)，表示 4 个资源分别还剩下 1/0/2/0。</p><p>检查一个状态是否安全的算法如下：</p><ul><li>查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。</li><li>假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。</li><li>重复以上两步，直到所有进程都标记为终止，则状态时安全的。</li></ul><p>如果一个状态不是安全的，需要拒绝进入这个状态。</p>',61),o=[d];function _(u,b){return a(),l("div",null,o)}const f=e(h,[["render",_],["__file","lock.html.vue"]]),v=JSON.parse('{"path":"/computer/os/lock.html","title":"计算机操作系统 - 死锁","lang":"zh-CN","frontmatter":{"description":"计算机操作系统 - 死锁 必要条件 互斥：每个资源要么已经分配给了一个进程，要么就是可用的。 占有和等待：已经得到了某个资源的进程可以再请求新的资源。 不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。 环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。 处理方法 主要...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/computer/os/lock.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"计算机操作系统 - 死锁"}],["meta",{"property":"og:description","content":"计算机操作系统 - 死锁 必要条件 互斥：每个资源要么已经分配给了一个进程，要么就是可用的。 占有和等待：已经得到了某个资源的进程可以再请求新的资源。 不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。 环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。 处理方法 主要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T05:57:49.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:modified_time","content":"2023-09-21T05:57:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机操作系统 - 死锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-21T05:57:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"必要条件","slug":"必要条件","link":"#必要条件","children":[]},{"level":2,"title":"处理方法","slug":"处理方法","link":"#处理方法","children":[]},{"level":2,"title":"鸵鸟策略","slug":"鸵鸟策略","link":"#鸵鸟策略","children":[]},{"level":2,"title":"死锁检测与死锁恢复","slug":"死锁检测与死锁恢复","link":"#死锁检测与死锁恢复","children":[{"level":3,"title":"1. 每种类型一个资源的死锁检测","slug":"_1-每种类型一个资源的死锁检测","link":"#_1-每种类型一个资源的死锁检测","children":[]},{"level":3,"title":"2. 每种类型多个资源的死锁检测","slug":"_2-每种类型多个资源的死锁检测","link":"#_2-每种类型多个资源的死锁检测","children":[]},{"level":3,"title":"3. 死锁恢复","slug":"_3-死锁恢复","link":"#_3-死锁恢复","children":[]}]},{"level":2,"title":"死锁预防","slug":"死锁预防","link":"#死锁预防","children":[{"level":3,"title":"1. 破坏互斥条件","slug":"_1-破坏互斥条件","link":"#_1-破坏互斥条件","children":[]},{"level":3,"title":"2. 破坏占有和等待条件","slug":"_2-破坏占有和等待条件","link":"#_2-破坏占有和等待条件","children":[]},{"level":3,"title":"3. 破坏不可抢占条件","slug":"_3-破坏不可抢占条件","link":"#_3-破坏不可抢占条件","children":[]},{"level":3,"title":"4. 破坏环路等待","slug":"_4-破坏环路等待","link":"#_4-破坏环路等待","children":[]}]},{"level":2,"title":"死锁避免","slug":"死锁避免","link":"#死锁避免","children":[{"level":3,"title":"1. 安全状态","slug":"_1-安全状态","link":"#_1-安全状态","children":[]},{"level":3,"title":"2. 单个资源的银行家算法","slug":"_2-单个资源的银行家算法","link":"#_2-单个资源的银行家算法","children":[]},{"level":3,"title":"3. 多个资源的银行家算法","slug":"_3-多个资源的银行家算法","link":"#_3-多个资源的银行家算法","children":[]}]}],"git":{"createdTime":1695275289000,"updatedTime":1695275869000,"contributors":[{"name":"lfange","email":"653398363@qq.com","commits":2}]},"readingTime":{"minutes":5.78,"words":1734},"filePathRelative":"computer/os/lock.md","localizedDate":"2023年9月21日","excerpt":"","autoDesc":true}');export{f as comp,v as data};
