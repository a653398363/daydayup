import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-R7pVbBlq.js";const t={},p=e(`<h1 id="前端获取唯一标识" tabindex="-1"><a class="header-anchor" href="#前端获取唯一标识"><span>前端获取唯一标识</span></a></h1><p>有时候业务需要在客户端生成浏览器唯一稳定 ID。</p><h2 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas"><span>canvas</span></a></h2><p>Canvas（画布）是 HTML5 中的一种动态绘图标签，可以用它来绘制图片。在不同操作系统、不同浏览器上，Canvas 绘制的图像将以不同的方式呈现，由于不同的系统显卡在绘制 canvas 时渲染的各个参数不同，所以绘制出来的图片的数据的 crc 校验是不一样的，具有很强的唯一性。原理是：在图片格式上，浏览器使用不同的图形处理引擎、图像导出选项、压缩级别，在系统层面，操作系统有不同的字体，它们使用不同的算法和设置来进行抗锯齿和子像素渲染。另外，Canvas 具有良好的兼容性，几乎被所有主流浏览器支持。</p><p>在具体代码上，通过 Canvas 绘图 API 绘制文字或图形后，通过 canvas.toDataURL() 方法获得 base64 编码，根据需要可再 hash 成指纹。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">&#39;22px Arial&#39;</span>
  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
  ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">&#39;hello fange&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fingerprintjs" tabindex="-1"><a class="header-anchor" href="#fingerprintjs"><span>FingerprintJS</span></a></h2><p><a href="https://github.com/fingerprintjs/fingerprintjs" target="_blank" rel="noopener noreferrer">FingerprintJS</a>（下文简称 FPJS）是一个浏览器指纹库，同时具有开源版和 Pro 版（付费版），可查询浏览器属性并从中计算出哈希值。与 Cookie 和本地存储不同，指纹在隐身模式下保持不变，甚至在浏览器数据清除时也是如此。</p><p>它最早的灵感就是来源于 EFF 提出浏览器指纹的概念，在此基础上，又增加了许多特征参数，包括一些新型的识别技术，比如：Canvas、AudioContext 等，在不断地迭代中，优化这些参数，并用最快的方式生成指纹。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Initialize the agent at application startup.</span>
<span class="token keyword">const</span> fpPromise <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;https://openfpcdn.io/fingerprintjs/v3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">FingerprintJS</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> FingerprintJS<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment">// Get the visitor identifier when you need it.</span>
fpPromise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is the visitor identifier:</span>
    <span class="token keyword">const</span> visitorId <span class="token operator">=</span> result<span class="token punctuation">.</span>visitorId
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>visitorId<span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#ID&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> visitorId
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webrtc" tabindex="-1"><a class="header-anchor" href="#webrtc"><span>webRTC</span></a></h2><p>内网 IP 的获取相对比较复杂，主要是需要依赖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/RTCPeerConnection" target="_blank" rel="noopener noreferrer">webRTC</a>, webRTC 是 HTML 5 的一个扩展</p><blockquote><p>WebRTC，名称源自网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的 API。它于 2011 年 6 月 1 日开源并在 Google、Mozilla、Opera 支持下被纳入万维网联盟的 W3C 推荐标准。</p></blockquote><p>封装好获取 IP 的方法，<code>ice.candidate.address</code>可以直接获取 Ip 地址，如果获取的 ip 地址为<code>b40199c4-35d2-4861-877f-17bf040ec543.local</code>类型的机器码，则参照下面的 Chrome 取消 IP 隐藏设置</p><p><code>b40199c4-35d2-4861-877f-17bf040ec543.local</code>机器乱码是因为 chrome 默认是隐藏掉 内网 IP 地址的，可以通过修改 chrome 浏览器的配置更改此行为, 需要设置一些额外的东西才可以将 IP 地址显示出来</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">RTCGetIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//compatibility for Firefox and chrome</span>
    window<span class="token punctuation">.</span>RTCPeerConnection <span class="token operator">=</span>
      window<span class="token punctuation">.</span>RTCPeerConnection <span class="token operator">||</span>
      window<span class="token punctuation">.</span>mozRTCPeerConnection <span class="token operator">||</span>
      window<span class="token punctuation">.</span>webkitRTCPeerConnection
    <span class="token keyword">var</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">iceServers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> myIP
    <span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    pc<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">&#39;bogus&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 随便创建 create a bogus data channel</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span>
      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
    pc<span class="token punctuation">.</span><span class="token function">createOffer</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">,</span> noop<span class="token punctuation">)</span> <span class="token comment">// create offer and set local description</span>
    pc<span class="token punctuation">.</span><span class="token function-variable function">onicecandidate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ice.candidate.address: xxx.xxx.xxx.xxx</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ice <span class="token operator">&amp;&amp;</span> ice<span class="token punctuation">.</span>candidate <span class="token operator">&amp;&amp;</span> ice<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        myIP <span class="token operator">=</span> ice<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>address <span class="token comment">// 也可以通过解析candidate字符串获取ip reg.exec(ice.candidate.candidate)[1]</span>
        pc<span class="token punctuation">.</span>onicecandidate <span class="token operator">=</span> noop
        <span class="token function">resolve</span><span class="token punctuation">(</span>myIP<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> <span class="token function">RTCGetIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rtcip-在线获取" tabindex="-1"><a class="header-anchor" href="#rtcip-在线获取"><span>RTCIP 在线获取</span></a></h3><p>获取当前客户端的 IP 地址的网址 <a href="http://net.ipcalf.com/" target="_blank" rel="noopener noreferrer">IPCalf</a>，该网站是根据 RTC 获取 IP 地址的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Your network <span class="token constant">IP</span> <span class="token literal-property property">is</span><span class="token operator">:</span>
ff383653<span class="token operator">-</span>0b2a<span class="token operator">-</span><span class="token number">4213</span><span class="token operator">-</span>9d4a<span class="token operator">-</span>18a9e8few2c4<span class="token punctuation">.</span>local
Make the locals proud<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chrome-取消-ip-隐藏设置" tabindex="-1"><a class="header-anchor" href="#chrome-取消-ip-隐藏设置"><span>Chrome 取消 IP 隐藏设置</span></a></h3><ol><li>Chrome：在 Chrome 浏览器地址栏中输入：<code>chrome://flags/</code></li><li>搜索<code>#enable-webrtc-hide-local-ips-with-mdns</code> 该配置 并将属性改为 <code>disabled</code> 之后按照 chrome 的指示点击<code>Relaunch</code>重启一下 IP 地址就正常了。 但是 chrome 更新到 86 版本之后就找不到#enable-webrtc-hide-local-ips-with-mdns 这个配置项了，</li></ol><p>替代的解决方案是安装一个 <code>WebRTC Network Limiter</code> 插件，然后选择第二项<code>Use my default public and private IP addresses</code>，这样的话本地 ip 地址就又能正常的显示出来了.</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://zhuanlan.zhihu.com/p/400206593" target="_blank" rel="noopener noreferrer">生成浏览器唯一稳定 ID 的探索</a></p>`,24),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","RTCPeer.html.vue"]]),k=JSON.parse('{"path":"/Front/JavaScript/RTCPeer.html","title":"前端获取唯一标识","lang":"zh-CN","frontmatter":{"icon":"article","category":["JavaScript"],"tag":["Interview"],"description":"前端获取唯一标识 有时候业务需要在客户端生成浏览器唯一稳定 ID。 canvas Canvas（画布）是 HTML5 中的一种动态绘图标签，可以用它来绘制图片。在不同操作系统、不同浏览器上，Canvas 绘制的图像将以不同的方式呈现，由于不同的系统显卡在绘制 canvas 时渲染的各个参数不同，所以绘制出来的图片的数据的 crc 校验是不一样的，具有很...","head":[["meta",{"property":"og:url","content":"https://lfange.github.io/Front/JavaScript/RTCPeer.html"}],["meta",{"property":"og:site_name","content":"哓番茄"}],["meta",{"property":"og:title","content":"前端获取唯一标识"}],["meta",{"property":"og:description","content":"前端获取唯一标识 有时候业务需要在客户端生成浏览器唯一稳定 ID。 canvas Canvas（画布）是 HTML5 中的一种动态绘图标签，可以用它来绘制图片。在不同操作系统、不同浏览器上，Canvas 绘制的图像将以不同的方式呈现，由于不同的系统显卡在绘制 canvas 时渲染的各个参数不同，所以绘制出来的图片的数据的 crc 校验是不一样的，具有很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-29T13:35:43.000Z"}],["meta",{"property":"article:author","content":"哓番茄"}],["meta",{"property":"article:tag","content":"Interview"}],["meta",{"property":"article:modified_time","content":"2023-03-29T13:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端获取唯一标识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-29T13:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哓番茄\\",\\"url\\":\\"https://lfange.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"canvas","slug":"canvas","link":"#canvas","children":[]},{"level":2,"title":"FingerprintJS","slug":"fingerprintjs","link":"#fingerprintjs","children":[]},{"level":2,"title":"webRTC","slug":"webrtc","link":"#webrtc","children":[{"level":3,"title":"RTCIP 在线获取","slug":"rtcip-在线获取","link":"#rtcip-在线获取","children":[]},{"level":3,"title":"Chrome 取消 IP 隐藏设置","slug":"chrome-取消-ip-隐藏设置","link":"#chrome-取消-ip-隐藏设置","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1666614651000,"updatedTime":1680096943000,"contributors":[{"name":"a653398363","email":"653398363@qq.com","commits":3},{"name":"FanGe","email":"653398363@qq.com","commits":2}]},"readingTime":{"minutes":3.52,"words":1056},"filePathRelative":"Front/JavaScript/RTCPeer.md","localizedDate":"2022年10月24日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
